---
http_interactions:
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?from=2025-02-01&metadataPrefix=datacite_swmath&until=2025-02-02&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:05 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:05 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:31168@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:07 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:07 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:40998@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:08 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:08 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:42132@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:10 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:10 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:43784@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:11 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:11 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:45035@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:12 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:12 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:46042@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:14 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:14 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:46864@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:16 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:16 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:47499@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:17 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:17 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:47887@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:18 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiID8+PD94bWwtc3R5bGVzaGVldCB0eXBlPSJ0ZXh0L3hzbCIgaHJlZj0iL29haS9zdHlsZXNoZWV0Ij8+PE9BSS1QTUggeG1sbnM9Imh0dHA6Ly93d3cub3BlbmFyY2hpdmVzLm9yZy9PQUkvMi4wLyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3Lm9wZW5hcmNoaXZlcy5vcmcvT0FJLzIuMC8gaHR0cDovL3d3dy5vcGVuYXJjaGl2ZXMub3JnL09BSS8yLjAvT0FJLVBNSC54c2QiPjxyZXNwb25zZURhdGU+MjAyNS0wNC0wMlQxNDo1MToxOFo8L3Jlc3BvbnNlRGF0ZT48cmVxdWVzdCByZXN1bXB0aW9uVG9rZW49InJvd3M9NTBAQHNlYXJjaE1hcms9b2FpOnN3bWF0aC5vcmc6NDc4ODdAQGZyb209MjAyNS0wMi0wMVQwMDowMDowMFpAQHRvdGFsPTYxNkBAdW50aWw9MjAyNS0wMi0wMlQyMzo1OTo1OVpAQG1ldGFkYXRhUHJlZml4PWRhdGFjaXRlX3N3bWF0aCIgdmVyYj0iTGlzdFJlY29yZHMiPmh0dHBzOi8vb2FpLnBvcnRhbC5tYXJkaTRuZmRpLmRlL29haS9PQUlIYW5kbGVyPC9yZXF1ZXN0PjxMaXN0UmVjb3Jkcz4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ3ODk2PC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1MzoyNlo8L2RhdGVzdGFtcD48c2V0U3BlYz4wNTwvc2V0U3BlYz48c2V0U3BlYz41MTwvc2V0U3BlYz48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDc4OTY8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ3ODk2PC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5FdmFucywgUi4gSi48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlIuIEouPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkV2YW5zPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5BR1Q8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+MDU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjUxPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIi8+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly9nYXAtcGFja2FnZXMuZ2l0aHViLmlvL2FndC88L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NDQ0NTE8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDc5Mjg8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjYyPC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0NzkyODwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDc5Mjg8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlRoYWxsLCBQLiBGLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+UC4gRi48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+VGhhbGw8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlJ1c3NlbGwsIEsuIFQuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5LLiBULjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5SdXNzZWxsPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5TaW1vbiwgUi4gTS48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlIuIE0uPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlNpbW9uPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5CRVJEUzwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42Mjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+Qmlvc3RhdGlzdGljczwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2Jpb3N0YXRpc3RpY3MubWRhbmRlcnNvbi5vcmcvU29mdHdhcmVEb3dubG9hZC9TaW5nbGVTb2Z0d2FyZS9JbmRleC8zNTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzcxMTc3NjwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNjg0Nzk3NDwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0NzkzMTwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+NjI8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ3OTMxPC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80NzkzMTwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+TGF1LCBZdWVuIFRzeiBBYmJ5PC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5ZdWVuIFRzeiBBYmJ5PC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkxhdTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+WWFuLCBKdW48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkp1bjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5ZYW48L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPmVpdjwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDIyPC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NjI8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmZ1bmN0aW9uYWwgYXBwcm9hY2g8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmdlbmVyYWxpemVkIG1ldGhvZCBvZiBtb21lbnRzPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5sb25naXR1ZGluYWwgZGF0YTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+dW5iaWFzZWQgZXN0aW1hdGluZyBlcXVhdGlvbjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+d29ya2luZyBjb3JyZWxhdGlvbjwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL29ubGluZWxpYnJhcnkud2lsZXkuY29tL2RvaS8xMC4xMDAyL3N0YTQuNDE4PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODUzNTU2PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ3OTM2PC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1MzoyNlo8L2RhdGVzdGFtcD48c2V0U3BlYz42Mjwvc2V0U3BlYz48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDc5MzY8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ3OTM2PC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5KaG9uZywgSmFlLUh3YW48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkphZS1Id2FuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkpob25nPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5LaW0sIEphZS1Zb3VuZzwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+SmFlLVlvdW5nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPktpbTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+TGVlLCBKYWUtRGVvazwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+SmFlLURlb2s8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TGVlPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5Lb28sIEphLVlvbmc8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkphLVlvbmc8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+S29vPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5wYnNzaW08L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxwdWJsaWNhdGlvblllYXI+MjAyNDwvcHVibGljYXRpb25ZZWFyPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjYyPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5jb29yZGluYXRlIGRlc2NlbnQgYWxnb3JpdGhtPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5sb2NhbGl6ZWQgcGVuYWx0eTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+dG90YWwgdmFyaWF0aW9uPC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vd3d3LnRhbmRmb25saW5lLmNvbS9kb2kvZnVsbC8xMC4xMDgwLzAzNjEwOTE4LjIwMjEuMjAxODQ1OTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg1NDQ5MjwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0Nzk2NjwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+ODE8L3NldFNwZWM+PHNldFNwZWM+ODU8L3NldFNwZWM+PHNldFNwZWM+NzY8L3NldFNwZWM+PHNldFNwZWM+MzU8L3NldFNwZWM+PHNldFNwZWM+ODM8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ3OTY2PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80Nzk2NjwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+TXVzb2tlLCBOYXRoYW48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPk5hdGhhbjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5NdXNva2U8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPlVsdHJhRGFyay5qbDwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDI0PC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+MzU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjc2PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj44MTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+ODM8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjg1PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5Kb3VybmFsIG9mIE9wZW4gU291cmNlIFNvZnR3YXJlPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5KdWxpYSBwYWNrYWdlPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5jb3Ntb2xvZ2ljYWwgc2NhbGFyIGZpZWxkczwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL211c29rZS5naXRodWIuaW8vVWx0cmFEYXJrLmpsL3N0YWJsZS88L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc3MTM2OTI8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDc5NzE8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjgxPC9zZXRTcGVjPjxzZXRTcGVjPjM1PC9zZXRTcGVjPjxzZXRTcGVjPjgzPC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0Nzk3MTwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDc5NzE8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkphaW4sIE11ZGl0PC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5NdWRpdDwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5KYWluPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5BbWluLCBNdXN0YWZhIEEuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5NdXN0YWZhIEEuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkFtaW48L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPmktU1BpbjwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDIzPC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+MzU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjgxPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj44Mzwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCIvPgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vYXJ4aXYub3JnL2Ficy8yMjExLjA4NDMzPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83NjkxODg3PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ3OTkxPC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1MzoyNlo8L2RhdGVzdGFtcD48c2V0U3BlYz42ODwvc2V0U3BlYz48c2V0U3BlYz4zNzwvc2V0U3BlYz48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDc5OTE8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ3OTkxPC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5QYXNzZXksIEQuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5ELjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5QYXNzZXk8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkxlaXNobWFuLCBRLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+US48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TGVpc2htYW48L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlBvb2wsIFQuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5ULjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Qb29sPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5IYXJkaW5nLCBTLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Uy48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+SGFyZGluZzwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+THVuY2Vmb3JkLCBXLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Vy48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+THVuY2Vmb3JkPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5SQ0luaXRpYWxDb25kPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjM3PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42ODwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCIvPgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vZ2l0aHViLmNvbS9kanBhc3NleWpyL1JDSW5pdGlhbENvbmQ8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NTUyMDg8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDc5OTQ8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjYyPC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0Nzk5NDwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDc5OTQ8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkNlbnRvZmFudGksIEZhYmlvPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5GYWJpbzwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5DZW50b2ZhbnRpPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5MZXBvcmUsIEFudG9uaW88L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkFudG9uaW88L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TGVwb3JlPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5QYWx1bWJvLCBCaWFnaW88L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkJpYWdpbzwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5QYWx1bWJvPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5zYXNmdW5jbHVzdDwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDI0PC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NjI8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiLz4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2NyYW4uci1wcm9qZWN0Lm9yZy93ZWIvcGFja2FnZXMvc2FzZnVuY2x1c3QvPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODU4OTgxPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83NzYxODc2PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ3OTk1PC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1MzoyNlo8L2RhdGVzdGFtcD48c2V0U3BlYz45MDwvc2V0U3BlYz48c2V0U3BlYz42Mjwvc2V0U3BlYz48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDc5OTU8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ3OTk1PC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5EaSBJb3JpbywgSi48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkouPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkRpIElvcmlvPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5WYW50aW5pLCBTLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Uy48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+VmFudGluaTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+ZnVuQkk8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NjI8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjkwPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIi8+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly93d3cubWF0ZS5wb2xpbWkuaXQvYmlibGlvdGVjYS9hZGQvcW1veC80Ni0yMDE5LnBkZjwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzQ3ODk0NDwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg1ODk4MTwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0Nzk5NzwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+ODE8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ3OTk3PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80Nzk5NzwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+QnVjY2lvbmksIEZlZGVyaWNvPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5GZWRlcmljbzwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5CdWNjaW9uaTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+S3JlZXIsIFBoaWxpcHAgQWxleGFuZGVyPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5QaGlsaXBwIEFsZXhhbmRlcjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5LcmVlcjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+TGl1LCBYaWFvPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5YaWFvPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkxpdTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+VGFuY3JlZGksIExvcmVuem88L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkxvcmVuem88L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+VGFuY3JlZGk8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPlRUSDwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDI0PC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+ODE8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmhpZ2hlci1vcmRlciBwZXJ0dXJiYXRpdmUgY2FsY3VsYXRpb25zPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5zY2F0dGVyaW5nIGFtcGxpdHVkZXM8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPkhpZ2dzIHByb2R1Y3Rpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPnRvcCBxdWFyazwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2FyeGl2Lm9yZy9hYnMvMjMxMi4xMDAxNTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg2MjA5MjwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODAxMDwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+NjI8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MDEwPC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODAxMDwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+R3JvZW5lYm9vbSwgUGlldDwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+UGlldDwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Hcm9lbmVib29tPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5pbmN1YmF0aW9udGltZTwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDI0PC9wdWJsaWNhdGlvblllYXI+CiAgIDxwdWJsaWNhdGlvblllYXI+MjAyMTwvcHVibGljYXRpb25ZZWFyPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjYyPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5ub25wYXJhbWV0cmljIE1MRTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+bm9ucGFyYW1ldHJpYyBTTUxFPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5DaGVybm9mZicncyBkaXN0cmlidXRpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmtlcm5lbCBlc3RpbWF0ZXM8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPnNtb290aGVkIGJvb3RzdHJhcDwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+aW5jdWJhdGlvbiB0aW1lPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5DT1ZJRC0xOTwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2FyeGl2Lm9yZy9hYnMvMjMxMC4wNDIyNTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzc3ODQ1NjwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg1NTg0NTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzU5MDU5MjwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODAxODwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+ODE8L3NldFNwZWM+PHNldFNwZWM+Njg8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MDE4PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODAxODwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+SWtlZGEsIFRha2FzaGk8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlRha2FzaGk8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+SWtlZGE8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPll1ZW4sIFNob2ppPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5TaG9qaTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5ZdWVuPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5SZXZEZWJ1Z2dlcjwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDIyPC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+Njg8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjgxPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5jb25jdXJyZW5jeTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+cmV2ZXJzaWJsZSBkZWJ1Z2dpbmc8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmNvbnRyYWN0IGFubm90YXRpb25zPC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vY2hhcHRlci8xMC4xMDA3Lzk3OC0zLTAzMS0wOTAwNS05XzE0PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83NjE1OTUxPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83OTQzNTAyPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ4MDQ2PC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1MzoyNlo8L2RhdGVzdGFtcD48c2V0U3BlYz42Mjwvc2V0U3BlYz48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDgwNDY8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ4MDQ2PC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5NZW5jaGV0dGksIEZpYW1tZXR0YTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+RmlhbW1ldHRhPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPk1lbmNoZXR0aTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+Q2lwb2xsaW5pLCBGYWJyaXppbzwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+RmFicml6aW88L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+Q2lwb2xsaW5pPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5NZWFsbGksIEZhYnJpemlhPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5GYWJyaXppYTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5NZWFsbGk8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPkNhdXNhbEFyaW1hPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8cHVibGljYXRpb25ZZWFyPjIwMjM8L3B1YmxpY2F0aW9uWWVhcj4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42Mjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+QVJJTUE8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmNhdXNhbCBpbmZlcmVuY2U8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmludGVydmVudGlvbiBhbmFseXNpczwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+cG90ZW50aWFsIG91dGNvbWVzPC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vYWNhZGVtaWMub3VwLmNvbS9lY3RqL2FydGljbGUvMjYvMS8xLzY3MTM2MjA8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NjI4Nzg8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgwNTA8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjYyPC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODA1MDwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgwNTA8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlNob2xva2hvdiwgQWxla3NlaTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+QWxla3NlaTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5TaG9sb2tob3Y8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkJ1cmtlLCBKYW1lcyBWLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+SmFtZXMgVi48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+QnVya2U8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlNhbnRvbWF1cm8sIERhbWlhbiBGLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+RGFtaWFuIEYuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlNhbnRvbWF1cm88L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlpoZW5nLCBQZW5nPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5QZW5nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlpoZW5nPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5BcmF2a2luLCBBbGVrc2FuZHI8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkFsZWtzYW5kcjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5BcmF2a2luPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5weXNyMzwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDI0PC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NjI8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmZlYXR1cmUgc2VsZWN0aW9uPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5taXhlZCBlZmZlY3RzIG1vZGVsczwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+bm9uY29udmV4IG9wdGltaXphdGlvbjwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2FyeGl2Lm9yZy9hYnMvMjIwNS4wNjkyNTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg2MjMyMjwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODA1OTwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+OTE8L3NldFNwZWM+PHNldFNwZWM+NjI8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MDU5PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODA1OTwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+RnVub3ZpdHMsIEJlcm5kPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5CZXJuZDwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5GdW5vdml0czwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+c3Zhcm1hd2hmPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8cHVibGljYXRpb25ZZWFyPjIwMjQ8L3B1YmxpY2F0aW9uWWVhcj4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42Mjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+OTE8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPm5vbi1pbnZlcnRpYmlsaXR5PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5XaWVuZXItSG9wZiBmYWN0b3Jpc2F0aW9uPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5zdHJ1Y3R1cmFsIHZlY3RvciBhdXRvcmVncmVzc2l2ZSBtb3ZpbmctYXZlcmFnZSBtb2RlbHM8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPm5vbi1HYXVzc2lhbml0eTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+aWRlbnRpZmlhYmlsaXR5PC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vd3d3LnNjaWVuY2VkaXJlY3QuY29tL3NjaWVuY2UvYXJ0aWNsZS9waWkvUzAzMDQ0MDc2MjQwMDExMlg8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NjM5ODA8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgwNjk8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjY1PC9zZXRTcGVjPjxzZXRTcGVjPjM3PC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODA2OTwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgwNjk8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkxldywgRS48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkUuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkxldzwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+SGVrYWwsIEEuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5BLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5IZWthbDwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+UG90b21raW4sIEsuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5LLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Qb3RvbWtpbjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+S29jaGR1bXBlciwgTi48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPk4uPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPktvY2hkdW1wZXI8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkhlbmNleSwgQi48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkIuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkhlbmNleTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+QmFrLCBTLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Uy48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+QmFrPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5Cb2dvbW9sb3YsIFMuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5TLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Cb2dvbW9sb3Y8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPkF1dG9Lb29wbWFuPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjM3PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42NTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCIvPgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vcHlwaS5vcmcvcHJvamVjdC9hdXRva29vcG1hbjwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg2MzU5ODwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODA3MjwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+ODI8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MDcyPC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODA3MjwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+THYsIFl1cWlhbjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+WXVxaWFuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkx2PC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5aaG91LCBCbzwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Qm88L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+WmhvdTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+V2FuZywgSmluaHVhbjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+SmluaHVhbjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5XYW5nPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5YdWFuLCBRaTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+UWk8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+WHVhbjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+VE5DUDwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDI0PC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+ODI8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPlwoa1wpLWNvcmUgZGVjb21wb3NpdGlvbjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+XChrXCktY29yZSByb2J1c3RuZXNzPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5hZHZlcnNhcmlhbCBhdHRhY2s8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPm5ldHdvcmsgc2NpZW5jZTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+Z3JhcGggZGF0YSBtaW5pbmc8L3N1YmplY3Q+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzIzMDEuMDAxMDg8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NjQ2NTI8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgxMjg8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODEyODwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgxMjg8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkJsYWtlLCBMLiBGLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+TC4gRi48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+Qmxha2U8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkxhd3NvbiwgUi4gRS48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlIuIEUuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkxhd3NvbjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+WXVpbGxlLCBJLiBNLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+SS4gTS48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+WXVpbGxlPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5LREY5PC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8cHVibGljYXRpb25ZZWFyPjE5NzA8L3B1YmxpY2F0aW9uWWVhcj4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIi8+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmNvbXB1dGVyIHNjaWVuY2UgYW5kIGF1dG9tYXRhPC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vYWNhZGVtaWMub3VwLmNvbS9jb21qbmwvYXJ0aWNsZS8xMy8xLzQwLzM4ODk3NzwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvMzI5NTc3ODwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODEzNDwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+NjU8L3NldFNwZWM+PHNldFNwZWM+NzY8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MTM0PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODEzNDwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+UGFwcCwgUGFzemvDoWw8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlBhc3prw6FsPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlBhcHA8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlTDs3RoLCDDgWdvdGE8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPsOBZ290YTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Uw7N0aDwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+SG9ydsOhdGgsIERlenPFkTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+RGV6c8WRPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkhvcnbDoXRoPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5QYVJlRGlTbzwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDI0PC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NjU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjc2PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5yZWFjdGlvbi1kaWZmdXNpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPnN0aWZmIGtpbmV0aWMgZXF1YXRpb25zPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5wYXJhbGxlbC1zb2x2ZXI8L3N1YmplY3Q+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly93d3cuc2NpZW5jZWRpcmVjdC5jb20vc2NpZW5jZS9hcnRpY2xlL3BpaS9TMDAxMDQ2NTUyNDAwMTE2NDwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg2NzU2MDwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODE0NjwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+NzQ8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MTQ2PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODE0NjwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+U29hcmUsIFN0ZWZhbiBDLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+U3RlZmFuIEMuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlNvYXJlPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5EaWVobCwgTWFydGluPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5NYXJ0aW48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+RGllaGw8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPlBvbHlOPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8cHVibGljYXRpb25ZZWFyPjIwMjQ8L3B1YmxpY2F0aW9uWWVhcj4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj43NDwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+cG9seW5vbWlhbCB5aWVsZCBmdW5jdGlvbjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+b3B0aW1pemF0aW9uPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5jb252ZXhpdHk8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPkZFIHNpbXVsYXRpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmRlZXAtZHJhd2luZzwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2xpbmsuc3ByaW5nZXIuY29tL2FydGljbGUvMTAuMTAwNy9zMDA0NjYtMDIzLTAyNDA4LTY8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc5MTI0Njc8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4Njg3MDg8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgxNTA8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjYyPC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODE1MDwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgxNTA8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkxpYW5nLCBXYW5mZW5nPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5XYW5mZW5nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkxpYW5nPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5aaGFuZywgWXVoYW88L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPll1aGFvPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlpoYW5nPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5XYW5nLCBKaXlhbmc8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkppeWFuZzwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5XYW5nPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5XdSwgWXVlPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5ZdWU8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+V3U8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPk1hLCBYaWFveWFuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5YaWFveWFuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPk1hPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5QUkNWPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8cHVibGljYXRpb25ZZWFyPjIwMjQ8L3B1YmxpY2F0aW9uWWVhcj4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42Mjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+bW9kaWZpZWQgQ2hvbGVza3kgZGVjb21wb3NpdGlvbjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+cHJlY2lzaW9uIG1hdHJpeDwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+cmVmaXR0ZWQgY3Jvc3MgdmFsaWRhdGlvbjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+dWx0cmFoaWdoIGRpbWVuc2lvbjwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL3d3dy5zY2llbmNlZGlyZWN0LmNvbS9zY2llbmNlL2FydGljbGUvYWJzL3BpaS9TMDM3ODM3NTgyNDAwMDIxMTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg2NjU1OTwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODE1NDwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+ODE8L3NldFNwZWM+PHNldFNwZWM+NTg8L3NldFNwZWM+PHNldFNwZWM+NDc8L3NldFNwZWM+PHNldFNwZWM+NjU8L3NldFNwZWM+PHNldFNwZWM+ODU8L3NldFNwZWM+PHNldFNwZWM+MDM8L3NldFNwZWM+PHNldFNwZWM+NTc8L3NldFNwZWM+PHNldFNwZWM+MzU8L3NldFNwZWM+PHNldFNwZWM+NjI8L3NldFNwZWM+PHNldFNwZWM+NzA8L3NldFNwZWM+PHNldFNwZWM+ODM8L3NldFNwZWM+PHNldFNwZWM+Nzg8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MTU0PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODE1NDwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+Q29sb21iaSwgU3RlcGhhbmU8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlN0ZXBoYW5lPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkNvbG9tYmk8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPk5vdmlrb3YsIERtaXRyaTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+RG1pdHJpPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPk5vdmlrb3Y8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPlBPV01FUzwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj4zNTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NzA8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjgxPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj44Mzwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+ODU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjAzPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj40Nzwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NTc8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjU4PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42Mjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NjU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjc4PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIi8+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cDovL2FzY2wubmV0LzExMTAuMDE3PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83NDY1OTYxPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83NDc3NjYwPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83NDcyMTA1PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83NTA3OTYzPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83NDY2MTEzPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ4MTY0PC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1MzoyNlo8L2RhdGVzdGFtcD48c2V0U3BlYz40Mjwvc2V0U3BlYz48c2V0U3BlYz42NTwvc2V0U3BlYz48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDgxNjQ8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ4MTY0PC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5CaXJnaW4sIEVybmVzdG8gRy48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkVybmVzdG8gRy48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+QmlyZ2luPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5HYXJkZW5naGksIEpvaG4gTC48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkpvaG4gTC48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+R2FyZGVuZ2hpPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5NYXJjb25kZXMsIERpYXVsYXMgUy48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkRpYXVsYXMgUy48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TWFyY29uZGVzPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5NYXJ0w61uZXosIEpvc8OpIE0uPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5Kb3PDqSBNLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5NYXJ0w61uZXo8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPmRmc2FuZWFjYzwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDIxPC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NDI8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjY1PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5ub25saW5lYXIgc3lzdGVtczwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+ZGVyaXZhdGl2ZS1mcmVlPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5zZXF1ZW50aWFsIHJlc2lkdWFsIG1ldGhvZHM8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPnNlcXVlbnRpYWwgc2VjYW50IGFwcHJvYWNoPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5hY2NlbGVyYXRpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPm51bWVyaWNhbCBleHBlcmltZW50czwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2NyYW4uci1wcm9qZWN0Lm9yZy93ZWIvcGFja2FnZXMvZGZzYW5lYWNjLzwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzgxMDA3NTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzQzMzgzMTwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODE2OTwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+OTA8L3NldFNwZWM+PHNldFNwZWM+MTU8L3NldFNwZWM+PHNldFNwZWM+NjU8L3NldFNwZWM+PHNldFNwZWM+NjI8L3NldFNwZWM+PHNldFNwZWM+NDE8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MTY5PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODE2OTwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+VmFuYXJldCwgQ2hhcmxpZTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Q2hhcmxpZTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5WYW5hcmV0PC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5DaGFyaWJkZTwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj4xNTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NDE8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjYyPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42NTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+OTA8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiLz4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2FyeGl2Lm9yZy9hYnMvMjAwMS4xMTQ2NTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzczNTQyODwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg5NjY1MzwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg1MDk4NjwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzQ4NjQ1NTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzAzOTY5MDwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNjY4MjgyOTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzc0Nzc0MTwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODE3ODwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+OTQ8L3NldFNwZWM+PHNldFNwZWM+OTI8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MTc4PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODE3ODwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+V2FuZywgR3VvdGFpPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5HdW90YWk8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+V2FuZzwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+WnVsdWFnYSwgTWFyaWEgQS48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPk1hcmlhIEEuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlp1bHVhZ2E8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkxpLCBXZW5xaTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+V2VucWk8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TGk8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlByYXR0LCBSb3NhbGluZDwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Um9zYWxpbmQ8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+UHJhdHQ8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlBhdGVsLCBQcmVtYWwgQS48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlByZW1hbCBBLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5QYXRlbDwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+QWVydHNlbiwgTWljaGFlbDwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+TWljaGFlbDwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5BZXJ0c2VuPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5Eb2VsLCBUb208L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlRvbTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Eb2VsPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5EYXZpZCwgQW5uYSBMLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+QW5uYSBMLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5EYXZpZDwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+RGVwcmVzdCwgSmFuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5KYW48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+RGVwcmVzdDwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+T3Vyc2VsaW4sIFNlYmFzdGllbjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+U2ViYXN0aWVuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPk91cnNlbGluPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5WZXJjYXV0ZXJlbiwgVG9tPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5Ub208L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+VmVyY2F1dGVyZW48L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPkRlZXBJR2VvUzwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj45Mjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+OTQ8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPkludGVyYWN0aXZlIGltYWdlIHNlZ21lbnRhdGlvbjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+Y29udm9sdXRpb25hbCBuZXVyYWwgbmV0d29yazwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+Z2VvZGVzaWMgZGlzdGFuY2U8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmNvbmRpdGlvbmFsIHJhbmRvbSBmaWVsZHM8L3N1YmplY3Q+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9wbWMvYXJ0aWNsZXMvUE1DNjU5NDQ1MC88L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4MTA3ODA8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc3NTUwMzg8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgxOTA8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODE5MDwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgxOTA8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPk1heWVyLCBNaWNoYWVsPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5NaWNoYWVsPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPk1heWVyPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5TdGFuZG8sIEFkcmlhbjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+QWRyaWFuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlN0YW5kbzwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+c2hhcHZpejwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIi8+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiLz4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2NyYW4uci1wcm9qZWN0Lm9yZy93ZWIvcGFja2FnZXMvc2hhcHZpei9pbmRleC5odG1sPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODgxMzk5PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ4MTk3PC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1MzoyNlo8L2RhdGVzdGFtcD48c2V0U3BlYz42MDwvc2V0U3BlYz48c2V0U3BlYz42NTwvc2V0U3BlYz48c2V0U3BlYz42Mjwvc2V0U3BlYz48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDgxOTc8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ4MTk3PC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5SZXV0ZXIsIEIuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5CLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5SZXV0ZXI8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPktsZWluLCBNLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+TS48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+S2xlaW48L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkxhbmdlLCBNLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+TS48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TGFuZ2U8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPnB5R1BDQ0E8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NjA8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjYyPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42NTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCIvPgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vcHlncGNjYS5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvaW5kZXguaHRtbDwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg2NjUwNDwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODI0MDwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+NjI8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MjQwPC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODI0MDwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+Um9iYWNrLCBQYXVsPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5QYXVsPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlJvYmFjazwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+TGVnbGVyLCBKdWxpZTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+SnVsaWU8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TGVnbGVyPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5CZXlvbmRNTFI8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxwdWJsaWNhdGlvblllYXI+MjAyMTwvcHVibGljYXRpb25ZZWFyPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjYyPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5tdWx0aXBsZSBsaW5lYXIgcmVncmVzc2lvbjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+Z2VuZXJhbGl6ZWQgbGluZWFyIG1vZGVsczwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+bXVsdGlsZXZlbCBtb2RlbHMgaW4gUjwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2Jvb2tkb3duLm9yZy9yb2JhY2svYm9va2Rvd24tQmV5b25kTUxSLzwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzMwMzMxNjwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODI0NjwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+NjU8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MjQ2PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODI0NjwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+Q2hlbiwgWmhpcWluPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5aaGlxaW48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+Q2hlbjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+RnVua2hvdXNlciwgVGhvbWFzPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5UaG9tYXM8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+RnVua2hvdXNlcjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+SGVkbWFuLCBQZXRlcjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+UGV0ZXI8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+SGVkbWFuPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5UYWdsaWFzYWNjaGksIEFuZHJlYTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+QW5kcmVhPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlRhZ2xpYXNhY2NoaTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+TW9iaWxlTmVSRjwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42NTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+Q29tcHV0ZXIgVmlzaW9uPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5QYXR0ZXJuIFJlY29nbml0aW9uPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5hclhpdl9jcy5DVjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+R3JhcGhpY3M8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmFyWGl2X2NzLkdSPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5NYWNoaW5lIExlYXJuaW5nPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5hclhpdl9jcy5MRzwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2FyeGl2Lm9yZy9hYnMvMjIwOC4wMDI3NzwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg3MzEwNDwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODI1MDwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+NjU8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MjUwPC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODI1MDwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+UGFyaywgS2V1bmhvbmc8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPktldW5ob25nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlBhcms8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlNpbmhhLCBVdGthcnNoPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5VdGthcnNoPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlNpbmhhPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5CYXJyb24sIEpvbmF0aGFuIFQuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5Kb25hdGhhbiBULjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5CYXJyb248L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkJvdWF6aXosIFNvZmllbjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+U29maWVuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkJvdWF6aXo8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkdvbGRtYW4sIERhbiBCPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5EYW4gQjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Hb2xkbWFuPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5TZWl0eiwgU3RldmVuIE0uPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5TdGV2ZW4gTS48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+U2VpdHo8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPk1hcnRpbi1CcnVhbGxhLCBSaWNhcmRvPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5SaWNhcmRvPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPk1hcnRpbi1CcnVhbGxhPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5OZXJmaWVzPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjY1PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIi8+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzIwMTEuMTI5NDg8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NzMxMTA8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgyNzM8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjY1PC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODI3MzwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgyNzM8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPllhbmcsIEJhbmdiYW5nPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5CYW5nYmFuZzwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5ZYW5nPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5CYW8sIENob25nPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5DaG9uZzwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5CYW88L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlplbmcsIEp1bnlpPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5KdW55aTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5aZW5nPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5CYW8sIEh1anVuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5IdWp1bjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5CYW88L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlpoYW5nLCBZaW5kYTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+WWluZGE8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+Wmhhbmc8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkN1aSwgWmhhb3Blbmc8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlpoYW9wZW5nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkN1aTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+WmhhbmcsIEd1b2Zlbmc8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkd1b2Zlbmc8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+Wmhhbmc8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPk5ldU1lc2g8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxwdWJsaWNhdGlvblllYXI+MjAyMjwvcHVibGljYXRpb25ZZWFyPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjY1PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5Db21wdXRlciBWaXNpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPlBhdHRlcm4gUmVjb2duaXRpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmFyWGl2X2NzLkNWPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5HcmFwaGljczwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+YXJYaXZfY3MuR1I8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPm5ldXJhbCByZW5kZXJpbmc8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPm1lc2gtYmFzZWQgcmVwcmVzZW50YXRpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPnNjZW5lIGVkaXRpbmc8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPnZpZXcgc3ludGhlc2lzPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj4zRCBkZWVwIGxlYXJuaW5nPC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vemp1M2R2LmdpdGh1Yi5pby9uZXVtZXNoLzwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg3MzEwNDwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODI5MDwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTM6MjZaPC9kYXRlc3RhbXA+PHNldFNwZWM+Njg8L3NldFNwZWM+PHNldFNwZWM+OTI8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MjkwPC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODI5MDwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+V3UsIFFpbGluZzwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+UWlsaW5nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPld1PC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5UYW4sIEppYW5jaGFvPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5KaWFuY2hhbzwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5UYW48L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlh1LCBLdW48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkt1bjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5YdTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+UGFsZXR0ZU5lUkY8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxwdWJsaWNhdGlvblllYXI+MjAyMzwvcHVibGljYXRpb25ZZWFyPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjY4PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj45Mjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+TmV1cmFsIFJhZGlhbmNlIEZpZWxkPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5OZVJGPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5OZVJGIGVkaXRpbmc8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPnBhbGV0dGU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPnJlY29sb3Jpbmc8L3N1YmplY3Q+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzIyMTIuMTI4NzE8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NzI0OTk8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgzMDk8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjgxPC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODMwOTwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgzMDk8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlNiZXJ2ZWdsaWVyaSwgR2lhY29tbzwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+R2lhY29tbzwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5TYmVydmVnbGllcmk8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlNwYWRhLCBHYWJyaWVsZTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+R2FicmllbGU8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+U3BhZGE8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPlBoaTR0b29sczwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDI0PC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+ODE8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmxhcmdlLW9yZGVyIGJlaGF2aW91ciBvZiBwZXJ0dXJiYXRpb24gdGhlb3J5PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5yZW5vcm1hbG9uczwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+cmVub3JtYWxpemF0aW9uIGdyb3VwPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5maWVsZCB0aGVvcmllcyBpbiBsb3dlciBkaW1lbnNpb25zPC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vYXJ4aXYub3JnL2Ficy8yMzExLjEyNTc2PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODc3Mzc0PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ4MzE1PC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1MzoyNlo8L2RhdGVzdGFtcD48c2V0U3BlYz42Mjwvc2V0U3BlYz48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDgzMTU8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ4MzE1PC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5MaSwgQ2h1bmxpbjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Q2h1bmxpbjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5MaTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+U2hlbiwgWGlhb3Rvbmc8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlhpYW90b25nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlNoZW48L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlBhbiwgV2VpPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5XZWk8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+UGFuPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5EZUZ1U0U8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxwdWJsaWNhdGlvblllYXI+MjAyNDwvcHVibGljYXRpb25ZZWFyPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjYyPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5kZWNvbmZvdW5kaW5nPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5kaXJlY3RlZCBhY3ljbGljIGdyYXBoPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5nZW5lIHJlZ3VsYXRvcnkgbmV0d29ya3M8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPm5ldXJhbCBuZXR3b3Jrczwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+dmFyaWFibGUgc2VsZWN0aW9uPC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vYXJ4aXYub3JnL2Ficy8yMzAyLjAzMTc4PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODc3MTUzPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83OTU2NDcxPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ4MzM5PC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1MzoyNlo8L2RhdGVzdGFtcD48c2V0U3BlYz4xNTwvc2V0U3BlYz48c2V0U3BlYz42NTwvc2V0U3BlYz48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDgzMzk8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ4MzM5PC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5TdG9jY28sIEQuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5ELjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5TdG9jY288L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkxhcmNoZXIsIE0uPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5NLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5MYXJjaGVyPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5CZXJ0b2xhenppLCBFLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+RS48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+QmVydG9sYXp6aTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+TEFTVDwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj4xNTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NjU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiLz4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL2dpdGh1Yi5jb20vU3RvY2NvRGF2aWRlL0xBU1Q8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NzgyNjU8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgzNDA8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjE1PC9zZXRTcGVjPjxzZXRTcGVjPjY1PC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODM0MDwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgzNDA8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlN0b2NjbywgRC48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkQuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlN0b2NjbzwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+TGFyY2hlciwgTS48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPk0uPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkxhcmNoZXI8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkJlcnRvbGF6emksIEUuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5FLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5CZXJ0b2xhenppPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5MRU08L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+MTU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjY1PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIi8+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly9naXRodWIuY29tL1N0b2Njb0RhdmlkZS9MRU08L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NzgyNjU8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgzNDI8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjUzOjI2WjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjkwPC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODM0MjwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgzNDI8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkJhY2tlLCBTLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Uy48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+QmFja2U8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlNrYXIsIEMuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5DLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Ta2FyPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5kZWwgR3JhbmFkbywgUC4gQy48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlAuIEMuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPmRlbCBHcmFuYWRvPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5UdXJndXQsIE8uPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5PLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5UdXJndXQ8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlRvbWFzZ2FyZCwgQS48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkEuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlRvbWFzZ2FyZDwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+RU1QSVJFPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8cHVibGljYXRpb25ZZWFyPjIwMjI8L3B1YmxpY2F0aW9uWWVhcj4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj45MDwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+U29mdHdhcmVYPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5Qb3dlciBzeXN0ZW0gcGxhbm5pbmcgc29mdHdhcmU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPlN0b2NoYXN0aWMgcHJvZ3JhbW1pbmc8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPk11bHRpLWhvcml6b24gcmVwcmVzZW50YXRpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPkVuZXJneSBzeXN0ZW1zIG1vZGVsbGluZzwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL29wZW5lbXBpcmUucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0LzwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg0ODI0NjwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg0ODI0MTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg3Nzc0OTwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg5NTQ2NDwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODM3NDwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTY6MTJaPC9kYXRlc3RhbXA+PHNldFNwZWM+MTM8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4Mzc0PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODM3NDwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+Q2hlbiwgSnVzdGluPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5KdXN0aW48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+Q2hlbjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+S2ltLCBZb3VuZ3N1PC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5Zb3VuZ3N1PC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPktpbTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+TW9udGHDsW8sIEpvbmF0aGFuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5Kb25hdGhhbjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Nb250YcOxbzwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+TXVsdGlwbGljaXR5U2VxdWVuY2U8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxwdWJsaWNhdGlvblllYXI+MjAyNDwvcHVibGljYXRpb25ZZWFyPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjEzPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5tdWx0aXBsaWNpdHkgc2VxdWVuY2U8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPlwoalwpLW11bHRpcGxpY2l0eTwvc3ViamVjdD4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwczovL21hY2F1bGF5Mi5jb20vZG9jL01hY2F1bGF5Mi9zaGFyZS9kb2MvTWFjYXVsYXkyL011bHRpcGxpY2l0eVNlcXVlbmNlL2h0bWwvaW5kZXguaHRtbDwvcmVsYXRlZElkZW50aWZpZXI+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc0NpdGVkQnkiPmh0dHBzOi8vYXBpLnpibWF0aC5vcmcvdjEvZG9jdW1lbnQvNzg3ODUzOTwvcmVsYXRlZElkZW50aWZpZXI+CiAgIDwvcmVsYXRlZElkZW50aWZpZXJzPgo8L3Jlc291cmNlPjwvbWV0YWRhdGE+PC9yZWNvcmQ+CjxyZWNvcmQ+PGhlYWRlcj48aWRlbnRpZmllcj5vYWk6c3dtYXRoLm9yZzo0ODM1NjwvaWRlbnRpZmllcj48ZGF0ZXN0YW1wPjIwMjUtMDItMDFUMDY6NTY6MTNaPC9kYXRlc3RhbXA+PHNldFNwZWM+NjU8L3NldFNwZWM+PC9oZWFkZXI+PG1ldGFkYXRhPjxyZXNvdXJjZSB4bWxucz0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQiCiAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIgogICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCBodHRwOi8vc2NoZW1hLmRhdGFjaXRlLm9yZy9tZXRhL2tlcm5lbC00L21ldGFkYXRhLnhzZCI+CiAgIDxpZGVudGlmaWVyIGlkZW50aWZpZXJUeXBlPSJzd01BVEgiPm9haTpzd21hdGgub3JnOjQ4MzU2PC9pZGVudGlmaWVyPgogICA8YWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgICAgIDxhbHRlcm5hdGVJZGVudGlmaWVyIGFsdGVybmF0ZUlkZW50aWZpZXJUeXBlPSJVUkwiPmh0dHBzOi8vc3dtYXRoLm9yZy9zb2Z0d2FyZS80ODM1NjwvYWx0ZXJuYXRlSWRlbnRpZmllcj4KICAgPC9hbHRlcm5hdGVJZGVudGlmaWVycz4KICAgPGNyZWF0b3JzPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+UGV3LCBKYWNrPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5KYWNrPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlBldzwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+VGFubmFoaWxsLCBDb25ub3I8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkNvbm5vcjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5UYW5uYWhpbGw8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPk11aXIsIFBhdWw8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlBhdWw8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TXVpcjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+QkFDT0xJS1I8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+NjU8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPkItU3BsaW5lczwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+Y29sbG9jYXRpb248L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPm50ZXJwb2xhdGlvbjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+ZXJyb3IgZXN0aW1hdGlvbjwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+ZXJyb3IgY29udHJvbDwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+ZXZlbnQgZGV0ZWN0aW9uPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5wYXJ0aWFsIGRpZmZlcmVudGlhbCBlcXVhdGlvbnM8L3N1YmplY3Q+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly9jcy5zbXUuY2Evfm11aXIvQkFDT0xJLTNfV2VicGFnZS5odG08L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4NjkxMDU8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgzNzg8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjU2OjEzWjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjk0PC9zZXRTcGVjPjxzZXRTcGVjPjY4PC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODM3ODwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgzNzg8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPk1haXNlbGksIEJhcmFrYTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+QmFyYWthPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPk1haXNlbGk8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPkxpcHNjaGl0eiBkaWZmdXNpb24taW5zcGlyZWQgZW5lcmd5IGZ1bmN0aW9uYWw8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxwdWJsaWNhdGlvblllYXI+MjAyNDwvcHVibGljYXRpb25ZZWFyPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjY4PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj45NDwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+YW5pc290cm9waWMgZGlmZnVzaW9uPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5pbWFnZSBkZW5vaXNpbmc8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiPmltYWdlIHJlc3RvcmF0aW9uPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5ub2lzZTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+aW1hZ2UgcXVhbGl0eSBhc3Nlc3NtZW50PC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvMTYwMTA4LWxpcHNjaGl0ei1kaWZmdXNpb24taW5zcGlyZWQtZW5lcmd5LWZ1bmN0aW9uYWw8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4ODAwNTg8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDgzODU8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjU2OjEzWjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjM0PC9zZXRTcGVjPjxzZXRTcGVjPjY4PC9zZXRTcGVjPjxzZXRTcGVjPjY1PC9zZXRTcGVjPjxzZXRTcGVjPjM1PC9zZXRTcGVjPjxzZXRTcGVjPjc0PC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODM4NTwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDgzODU8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlNhaGEsIFByaXlhYnJhdGE8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlByaXlhYnJhdGE8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+U2FoYTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+RGFzaCwgU2F1cmFiaDwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+U2F1cmFiaDwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5EYXNoPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5NdWtob3BhZGh5YXksIFNhaWJhbDwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+U2FpYmFsPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPk11a2hvcGFkaHlheTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+UGhJQ05ldDwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDIxPC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+MzQ8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjM1PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIj42NTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+Njg8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjc0PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIi8+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzIwMDQuMDYyNDM8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc0NTE3MjI8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc3NDM2MTI8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc3NTIxNjU8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDg0Mzc8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjU2OjEzWjwvZGF0ZXN0YW1wPjxzZXRTcGVjPjkwPC9zZXRTcGVjPjxzZXRTcGVjPjY4PC9zZXRTcGVjPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODQzNzwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDg0Mzc8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkNoZW4sIFplZmVuZzwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+WmVmZW5nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkNoZW48L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkdhbiwgV2Vuc2hlbmc8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPldlbnNoZW5nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkdhbjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+VGFFUjwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhcj4yMDI0PC9wdWJsaWNhdGlvblllYXI+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCI+Njg8L3N1YmplY3Q+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiPjkwPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5wYXR0ZXJuIG1pbmluZzwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+ZXBpc29kZSBydWxlczwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+ZnJlcXVlbmN5PC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj50YXJnZXRlZCBtaW5pbmc8L3N1YmplY3Q+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly93d3cuc2NpZW5jZWRpcmVjdC5jb20vc2NpZW5jZS9hcnRpY2xlL2Ficy9waWkvUzAwMjAwMjU1MjQwMDk0MjM8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4ODAwNzI8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDg0NDU8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjU2OjEzWjwvZGF0ZXN0YW1wPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODQ0NTwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDg0NDU8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlJvYmxlcy1CZXJ1bWVuLCBIZXJtZXM8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkhlcm1lczwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Sb2JsZXMtQmVydW1lbjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+WmFmcmEsIEFtZWxpYTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+QW1lbGlhPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlphZnJhPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5GYXJkb3VuLCBIYWJpYiBNLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+SGFiaWIgTS48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+RmFyZG91bjwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+VmVudHVyYSwgU2ViYXN0acOhbjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+U2ViYXN0acOhbjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5WZW50dXJhPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5MRUFDPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiLz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCIvPgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vd3d3LnNjaWVuY2VkaXJlY3QuY29tL3NjaWVuY2UvYXJ0aWNsZS9hYnMvcGlpL1MwOTUwNzA1MTE5MzAyMTRYPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC88L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDg0OTI8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjU2OjEzWjwvZGF0ZXN0YW1wPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODQ5MjwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDg0OTI8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlNwaW5lbGxpLCBELjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+RC48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+U3BpbmVsbGk8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkluZ3Jhc3NpYSwgUy48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlMuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkluZ3Jhc3NpYTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+Vml0dGFkaW5pLCBHLjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Ry48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+Vml0dGFkaW5pPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5Dd21nbG08L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCIvPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5TdGF0YTwvc3ViamVjdD4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCI+ZmluaXRlIG1peHR1cmUgbW9kZWxzPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5yZWdyZXNzaW9uPC9zdWJqZWN0PgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIj5jbHVzdGVyPC9zdWJqZWN0PgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vZWNvbnBhcGVycy5yZXBlYy5vcmcvc29mdHdhcmUvYm9jYm9jb2RlL3M0NTkwOTAuaHRtPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODU5MDUzPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ4NDkzPC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1NjoxM1o8L2RhdGVzdGFtcD48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDg0OTM8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ4NDkzPC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5Jc2xhbSwgU2Fyd2FyPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5TYXJ3YXI8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+SXNsYW08L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkxhbWJlcnQsIFBhdWw8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlBhdWw8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TGFtYmVydDwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+UnV0aGVyZm9yZCwgTWFyazwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+TWFyazwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5SdXRoZXJmb3JkPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5zdHBtMmNyPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiLz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCIvPgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vaWRlYXMucmVwZWMub3JnL2MvYm9jL2JvY29kZS9zNDU4MjQzLmh0bWw8L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4Njk5NDA8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDg1MjQ8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjU2OjEzWjwvZGF0ZXN0YW1wPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODUyNDwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDg1MjQ8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPlJhdXNjaGVuYmVyZ2VyLCBBcm1pbjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+QXJtaW48L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+UmF1c2NoZW5iZXJnZXI8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPmNvcm5ldDwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHB1YmxpY2F0aW9uWWVhci8+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCIvPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIi8+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly9jcmFuLnItcHJvamVjdC5vcmcvd2ViL3BhY2thZ2VzL2Nvcm5ldC9pbmRleC5odG1sPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODg3ODU3PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ4NTI2PC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1NjoxM1o8L2RhdGVzdGFtcD48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDg1MjY8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ4NTI2PC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5BbmRlcnNvbiwgUy4gQy48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlMuIEMuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkFuZGVyc29uPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5EdWx2eSwgTi4gSy48L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPk4uIEsuPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkR1bHZ5PC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5Db29wZXIsIEEuIEIuPC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5BLiBCLjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5Db29wZXI8L2ZhbWlseU5hbWU+CiAgICAgIDwvY3JlYXRvcj4KICAgPC9jcmVhdG9ycz4KICAgPHRpdGxlcz4KICAgICAgPHRpdGxlPmVjb2ZvbGlvPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiLz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCIvPgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vcmRyci5pby9naXRodWIvc2VhbmFuZGVyc29uL2Vjb2ZvbGlvL21hbi9lY29mb2xpby5odG1sPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODg3NTY2PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ4NTMxPC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1NjoxM1o8L2RhdGVzdGFtcD48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDg1MzE8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ4NTMxPC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5MaSwgU2hhb3Rpbmc8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPlNoYW90aW5nPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPkxpPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5DaGVuLCBKaWFodWE8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkppYWh1YTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5DaGVuPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5MaSwgUGVuZ2ZlaTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+UGVuZ2ZlaTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5MaTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICA8L2NyZWF0b3JzPgogICA8dGl0bGVzPgogICAgICA8dGl0bGU+TWl4dHVyZUluZjwvdGl0bGU+CiAgIDwvdGl0bGVzPgogICA8ZGVzY3JpcHRpb25zPgogICAgICA8ZGVzY3JpcHRpb24geG1sOmxhbmc9ImVuIiBkZXNjcmlwdGlvblR5cGU9IkFic3RyYWN0Ij56Yk1BVEggT3BlbiBXZWIgSW50ZXJmYWNlIGNvbnRlbnRzIHVuYXZhaWxhYmxlIGR1ZSB0byBjb25mbGljdGluZyBsaWNlbnNlcy48L2Rlc2NyaXB0aW9uPgogICA8L2Rlc2NyaXB0aW9ucz4KICAgPHN1YmplY3RzPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJtc2MyMDIwIi8+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9ImtleXdvcmQiLz4KICAgPC9zdWJqZWN0cz4KICAgPGxhbmd1YWdlPkVuZ2xpc2g8L2xhbmd1YWdlPgogICA8cmVzb3VyY2VUeXBlIHJlc291cmNlVHlwZUdlbmVyYWw9IlNvZnR3YXJlIi8+CiAgIDxmb3JtYXRzPgogICAgICA8Zm9ybWF0PmFwcGxpY2F0aW9uL3htbDwvZm9ybWF0PgogICA8L2Zvcm1hdHM+CiAgIDxyZWxhdGVkSWRlbnRpZmllcnM+CiAgICAgIDxyZWxhdGVkSWRlbnRpZmllciByZWxhdGVkSWRlbnRpZmllclR5cGU9IlVSTCIgcmVsYXRpb25UeXBlPSJJc1NvdXJjZU9mIj5odHRwOi8vY3Jhbi5uZXhyLmNvbS93ZWIvcGFja2FnZXMvTWl4dHVyZUluZi9pbmRleC5odG1sPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODg2MTIxPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlY29yZD48aGVhZGVyPjxpZGVudGlmaWVyPm9haTpzd21hdGgub3JnOjQ4NTMyPC9pZGVudGlmaWVyPjxkYXRlc3RhbXA+MjAyNS0wMi0wMVQwNjo1NjoxM1o8L2RhdGVzdGFtcD48L2hlYWRlcj48bWV0YWRhdGE+PHJlc291cmNlIHhtbG5zPSJodHRwOi8vZGF0YWNpdGUub3JnL3NjaGVtYS9rZXJuZWwtNCIKICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IGh0dHA6Ly9zY2hlbWEuZGF0YWNpdGUub3JnL21ldGEva2VybmVsLTQvbWV0YWRhdGEueHNkIj4KICAgPGlkZW50aWZpZXIgaWRlbnRpZmllclR5cGU9InN3TUFUSCI+b2FpOnN3bWF0aC5vcmc6NDg1MzI8L2lkZW50aWZpZXI+CiAgIDxhbHRlcm5hdGVJZGVudGlmaWVycz4KICAgICAgPGFsdGVybmF0ZUlkZW50aWZpZXIgYWx0ZXJuYXRlSWRlbnRpZmllclR5cGU9IlVSTCI+aHR0cHM6Ly9zd21hdGgub3JnL3NvZnR3YXJlLzQ4NTMyPC9hbHRlcm5hdGVJZGVudGlmaWVyPgogICA8L2FsdGVybmF0ZUlkZW50aWZpZXJzPgogICA8Y3JlYXRvcnM+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5aaGFuZywgWWljaGk8L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPllpY2hpPC9naXZlbk5hbWU+CiAgICAgICAgIDxmYW1pbHlOYW1lPlpoYW5nPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5sbWVWYXJDb21wPC90aXRsZT4KICAgPC90aXRsZXM+CiAgIDxkZXNjcmlwdGlvbnM+CiAgICAgIDxkZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iIGRlc2NyaXB0aW9uVHlwZT0iQWJzdHJhY3QiPnpiTUFUSCBPcGVuIFdlYiBJbnRlcmZhY2UgY29udGVudHMgdW5hdmFpbGFibGUgZHVlIHRvIGNvbmZsaWN0aW5nIGxpY2Vuc2VzLjwvZGVzY3JpcHRpb24+CiAgIDwvZGVzY3JpcHRpb25zPgogICA8c3ViamVjdHM+CiAgICAgIDxzdWJqZWN0IHN1YmplY3RTY2hlbWU9Im1zYzIwMjAiLz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ia2V5d29yZCIvPgogICA8L3N1YmplY3RzPgogICA8bGFuZ3VhZ2U+RW5nbGlzaDwvbGFuZ3VhZ2U+CiAgIDxyZXNvdXJjZVR5cGUgcmVzb3VyY2VUeXBlR2VuZXJhbD0iU29mdHdhcmUiLz4KICAgPGZvcm1hdHM+CiAgICAgIDxmb3JtYXQ+YXBwbGljYXRpb24veG1sPC9mb3JtYXQ+CiAgIDwvZm9ybWF0cz4KICAgPHJlbGF0ZWRJZGVudGlmaWVycz4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzU291cmNlT2YiPmh0dHBzOi8vZ2l0aHViLmNvbS9jcmFuL2xtZVZhckNvbXAvYmxvYi9tYXN0ZXIvREVTQ1JJUFRJT048L3JlbGF0ZWRJZGVudGlmaWVyPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNDaXRlZEJ5Ij5odHRwczovL2FwaS56Ym1hdGgub3JnL3YxL2RvY3VtZW50Lzc4ODYxMjE8L3JlbGF0ZWRJZGVudGlmaWVyPgogICA8L3JlbGF0ZWRJZGVudGlmaWVycz4KPC9yZXNvdXJjZT48L21ldGFkYXRhPjwvcmVjb3JkPgo8cmVjb3JkPjxoZWFkZXI+PGlkZW50aWZpZXI+b2FpOnN3bWF0aC5vcmc6NDg1Mzg8L2lkZW50aWZpZXI+PGRhdGVzdGFtcD4yMDI1LTAyLTAxVDA2OjU2OjEzWjwvZGF0ZXN0YW1wPjwvaGVhZGVyPjxtZXRhZGF0YT48cmVzb3VyY2UgeG1sbnM9Imh0dHA6Ly9kYXRhY2l0ZS5vcmcvc2NoZW1hL2tlcm5lbC00IgogICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL2RhdGFjaXRlLm9yZy9zY2hlbWEva2VybmVsLTQgaHR0cDovL3NjaGVtYS5kYXRhY2l0ZS5vcmcvbWV0YS9rZXJuZWwtNC9tZXRhZGF0YS54c2QiPgogICA8aWRlbnRpZmllciBpZGVudGlmaWVyVHlwZT0ic3dNQVRIIj5vYWk6c3dtYXRoLm9yZzo0ODUzODwvaWRlbnRpZmllcj4KICAgPGFsdGVybmF0ZUlkZW50aWZpZXJzPgogICAgICA8YWx0ZXJuYXRlSWRlbnRpZmllciBhbHRlcm5hdGVJZGVudGlmaWVyVHlwZT0iVVJMIj5odHRwczovL3N3bWF0aC5vcmcvc29mdHdhcmUvNDg1Mzg8L2FsdGVybmF0ZUlkZW50aWZpZXI+CiAgIDwvYWx0ZXJuYXRlSWRlbnRpZmllcnM+CiAgIDxjcmVhdG9ycz4KICAgICAgPGNyZWF0b3I+CiAgICAgICAgIDxjcmVhdG9yTmFtZSBuYW1lVHlwZT0iUGVyc29uYWwiPkxlcm91eCwgQW5kcmV3PC9jcmVhdG9yTmFtZT4KICAgICAgICAgPGdpdmVuTmFtZT5BbmRyZXc8L2dpdmVuTmFtZT4KICAgICAgICAgPGZhbWlseU5hbWU+TGVyb3V4PC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5YaWFvLCBMdW88L2NyZWF0b3JOYW1lPgogICAgICAgICA8Z2l2ZW5OYW1lPkx1bzwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5YaWFvPC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgICAgIDxjcmVhdG9yPgogICAgICAgICA8Y3JlYXRvck5hbWUgbmFtZVR5cGU9IlBlcnNvbmFsIj5DcmFpbmljZWFudSwgQ2lwcmlhbjwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+Q2lwcmlhbjwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5DcmFpbmljZWFudTwvZmFtaWx5TmFtZT4KICAgICAgPC9jcmVhdG9yPgogICAgICA8Y3JlYXRvcj4KICAgICAgICAgPGNyZWF0b3JOYW1lIG5hbWVUeXBlPSJQZXJzb25hbCI+Q2hlY2tseSwgV2lsbGlhbTwvY3JlYXRvck5hbWU+CiAgICAgICAgIDxnaXZlbk5hbWU+V2lsbGlhbTwvZ2l2ZW5OYW1lPgogICAgICAgICA8ZmFtaWx5TmFtZT5DaGVja2x5PC9mYW1pbHlOYW1lPgogICAgICA8L2NyZWF0b3I+CiAgIDwvY3JlYXRvcnM+CiAgIDx0aXRsZXM+CiAgICAgIDx0aXRsZT5mY3I8L3RpdGxlPgogICA8L3RpdGxlcz4KICAgPGRlc2NyaXB0aW9ucz4KICAgICAgPGRlc2NyaXB0aW9uIHhtbDpsYW5nPSJlbiIgZGVzY3JpcHRpb25UeXBlPSJBYnN0cmFjdCI+emJNQVRIIE9wZW4gV2ViIEludGVyZmFjZSBjb250ZW50cyB1bmF2YWlsYWJsZSBkdWUgdG8gY29uZmxpY3RpbmcgbGljZW5zZXMuPC9kZXNjcmlwdGlvbj4KICAgPC9kZXNjcmlwdGlvbnM+CiAgIDxzdWJqZWN0cz4KICAgICAgPHN1YmplY3Qgc3ViamVjdFNjaGVtZT0ibXNjMjAyMCIvPgogICAgICA8c3ViamVjdCBzdWJqZWN0U2NoZW1lPSJrZXl3b3JkIi8+CiAgIDwvc3ViamVjdHM+CiAgIDxsYW5ndWFnZT5FbmdsaXNoPC9sYW5ndWFnZT4KICAgPHJlc291cmNlVHlwZSByZXNvdXJjZVR5cGVHZW5lcmFsPSJTb2Z0d2FyZSIvPgogICA8Zm9ybWF0cz4KICAgICAgPGZvcm1hdD5hcHBsaWNhdGlvbi94bWw8L2Zvcm1hdD4KICAgPC9mb3JtYXRzPgogICA8cmVsYXRlZElkZW50aWZpZXJzPgogICAgICA8cmVsYXRlZElkZW50aWZpZXIgcmVsYXRlZElkZW50aWZpZXJUeXBlPSJVUkwiIHJlbGF0aW9uVHlwZT0iSXNTb3VyY2VPZiI+aHR0cHM6Ly9jcmFuLnItcHJvamVjdC5vcmcvd2ViL3BhY2thZ2VzL2Zjci9pbmRleC5odG1sPC9yZWxhdGVkSWRlbnRpZmllcj4KICAgICAgPHJlbGF0ZWRJZGVudGlmaWVyIHJlbGF0ZWRJZGVudGlmaWVyVHlwZT0iVVJMIiByZWxhdGlvblR5cGU9IklzQ2l0ZWRCeSI+aHR0cHM6Ly9hcGkuemJtYXRoLm9yZy92MS9kb2N1bWVudC83ODg3ODQ3PC9yZWxhdGVkSWRlbnRpZmllcj4KICAgPC9yZWxhdGVkSWRlbnRpZmllcnM+CjwvcmVzb3VyY2U+PC9tZXRhZGF0YT48L3JlY29yZD4KPHJlc3VtcHRpb25Ub2tlbiBleHBpcmF0aW9uRGF0ZT0iMjAyNS0wNC0wMlQxNTo1MToxOFoiIGNvbXBsZXRlTGlzdFNpemU9IjYxNiI+cm93cz01MEBAc2VhcmNoTWFyaz1vYWk6c3dtYXRoLm9yZzo0ODUzOEBAZnJvbT0yMDI1LTAyLTAxVDAwOjAwOjAwWkBAdG90YWw9NjE2QEB1bnRpbD0yMDI1LTAyLTAyVDIzOjU5OjU5WkBAbWV0YWRhdGFQcmVmaXg9ZGF0YWNpdGVfc3dtYXRoPC9yZXN1bXB0aW9uVG9rZW4+PC9MaXN0UmVjb3Jkcz48L09BSS1QTUg+
  recorded_at: Wed, 02 Apr 2025 14:51:18 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:48538@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:20 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:20 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:49174@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:24 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:25 GMT
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?resumptionToken=rows=50@@searchMark=oai:swmath.org:49820@@from=2025-02-01T00:00:00Z@@total=616@@until=2025-02-02T23:59:59Z@@metadataPrefix=datacite_swmath&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Wed, 02 Apr 2025 14:51:26 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Apr 2025 14:51:26 GMT
recorded_with: VCR 6.3.1
