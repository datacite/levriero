---
http_interactions:
- request:
    method: get
    uri: https://oai.portal.mardi4nfdi.de/oai/OAIHandler?from=2025-01-01&metadataPrefix=datacite_articles&until=2025-02-28&verb=ListRecords
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/xml;charset=UTF-8
      Date:
      - Mon, 24 Mar 2025 16:10:45 GMT
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <?xml version="1.0" encoding="UTF-8" ?><?xml-stylesheet type="text/xsl" href="/oai/stylesheet"?><OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd"><responseDate>2025-03-24T16:10:42Z</responseDate><request from="2025-01-01" metadataPrefix="datacite_articles" until="2025-02-28" verb="ListRecords">https://oai.portal.mardi4nfdi.de/oai/OAIHandler</request><ListRecords>
<record><header><identifier>oai:zbmath.org:902636232</identifier><datestamp>2025-03-21T20:07:07Z</datestamp><setSpec>49</setSpec><setSpec>35</setSpec><setSpec>74</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <identifier identifierType="DOI">10.1016/j.jde.2024.12.025.</identifier>
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">arXiv:2412.20094</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:902636232</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/902636232</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Buoso, Davide</creatorName>
         <givenName>Buoso</givenName>
         <familyName>Davide</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">buoso.davide</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Ferraresso, Francesco</creatorName>
         <givenName>Ferraresso</givenName>
         <familyName>Francesco</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">ferraresso.francesco</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">Spectral convergence for the Reissner-Mindlin system in arbitrary dimension</title>
   </titles>
   <publicationYear>2024</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="35J30">Higher-order elliptic equations</subject>
      <subject subjectScheme="msc2020" classificationCode="35P15">Estimates of eigenvalues in context of PDEs</subject>
      <subject subjectScheme="msc2020" classificationCode="49R05">Variational methods for eigenvalues of operators</subject>
      <subject subjectScheme="msc2020" classificationCode="74K20">Plates</subject>
   </subjects>
   <language>:unkn</language>
   <resourceType resourceTypeGeneral=":none"/>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:902636290</identifier><datestamp>2025-03-21T20:07:07Z</datestamp></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <identifier identifierType="ARXIV">2412.20152</identifier>
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">arXiv:2412.20152</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:902636290</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/902636290</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Abdellaoui, Mohammed</creatorName>
         <givenName>Abdellaoui</givenName>
         <familyName>Mohammed</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">abdellaoui.mohammed-amin</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Abouelkhir, Nour-Eddine</creatorName>
         <givenName>Abouelkhir</givenName>
         <familyName>Nour-Eddine</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">abouelkhir.nour-eddine</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Slaoui, Abdallah</creatorName>
         <givenName>Slaoui</givenName>
         <familyName>Abdallah</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">slaoui.abdallah</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Laamara, Rachid Ahl</creatorName>
         <givenName>Laamara</givenName>
         <familyName>Rachid Ahl</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">laamara.rachid-ahl</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: In quantum parameter estimation, the quantum Cramér-Rao bound (QCRB) sets a fundamental limit on the precision achievable with unbiased estimators. It relates the uncertainty in estimating a parameter to the inverse of the quantum Fisher information (QFI). Both QCRB and QFI are valuable tools for analyzing interferometric phase sensitivity. This paper compares the single-parameter and two-parameter QFI for a Mach-Zehnder interferometer (MZI) with three detection schemes: single-mode and difference intensity detection, neither has access to an external phase reference and balanced homodyne detection with access to an external phase reference. We use a spin-coherent state associated with the su(2) algebra as the input state in all scenarios and show that all three schemes can achieve the QCRB for the spin-coherent input state. Furthermore, we explore the utilization of SU(2) coherent states in diverse scenarios. Significantly, we find that the best pressure is obtained when the total angular momentum quantum number $j$ is high, and we demonstrate that given optimal conditions, all detection schemes can achieve the QCRB by utilizing SU(2) coherent states as input states.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Quantum phase estimation and realistic detection schemes in Mach-Zehnder interferometer using SU(2) coherent states</title>
   </titles>
   <publicationYear>2024</publicationYear>
   <language>:unkn</language>
   <resourceType resourceTypeGeneral=":none"/>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:902636453</identifier><datestamp>2025-03-21T20:07:07Z</datestamp></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <identifier identifierType="DOI">10.3150/23-BEJ1691</identifier>
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">arXiv:2412.20315</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:902636453</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/902636453</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Kargin, Vladislav</creatorName>
         <givenName>Kargin</givenName>
         <familyName>Vladislav</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">kargin.vladislav</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: Let $P_n$ be a random Bernoulli excursion of length $2n$. We show that the area under $P_n$ and the number of peaks of $P_n$ are asymptotically independent. We also show that these statistics have the correlation coefficient asymptotic to $c /\sqrt{n}$ for large $n$, where $c &lt; 0$, and explicitly compute the coefficient $c$.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">On the joint distribution of the area and the number of peaks for Bernoulli excursions</title>
   </titles>
   <publicationYear>2024</publicationYear>
   <language>:unkn</language>
   <resourceType resourceTypeGeneral=":none"/>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:902636664</identifier><datestamp>2025-03-21T20:07:07Z</datestamp><setSpec>54</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <identifier identifierType="DOI">10.1007/s10958-023-06507-w</identifier>
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">arXiv:2412.20526</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:902636664</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/902636664</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Petrov, Evgeniy A.</creatorName>
         <givenName>Petrov</givenName>
         <familyName>Evgeniy A.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">petrov.evgenii-aleksandrovich</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Salimov, Ruslan R.</creatorName>
         <givenName>Salimov</givenName>
         <familyName>Ruslan R.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">salimov.ruslan-radikovich</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">A note on generalized four-point inequality</title>
   </titles>
   <publicationYear>2024</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="54E25">Semimetric spaces</subject>
      <subject subjectScheme="msc2020" classificationCode="54C25">Embedding</subject>
   </subjects>
   <language>:unkn</language>
   <resourceType resourceTypeGeneral=":none"/>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:902636671</identifier><datestamp>2025-03-21T20:07:07Z</datestamp><setSpec>05</setSpec><setSpec>54</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <identifier identifierType="DOI">10.1007/s10474-024-01473-4</identifier>
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">arXiv:2412.20533</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:902636671</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/902636671</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Petrov, Evgeniy</creatorName>
         <givenName>Petrov</givenName>
         <familyName>Evgeniy</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">petrov.evgenii-petrovich</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">The existence of continuations for different types of metrics</title>
   </titles>
   <publicationYear>2024</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="54E35">Metric spaces, metrizability</subject>
      <subject subjectScheme="msc2020" classificationCode="05C38">Paths and cycles</subject>
   </subjects>
   <language>:unkn</language>
   <resourceType resourceTypeGeneral=":none"/>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:902637040</identifier><datestamp>2025-03-21T20:07:07Z</datestamp><setSpec>60</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <identifier identifierType="DOI">10.4213/faa4203</identifier>
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">arXiv:2412.20902</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:902637040</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/902637040</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Bufetov, Alexander I.</creatorName>
         <givenName>Bufetov</givenName>
         <familyName>Alexander I.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">bufetov.aleksander-igorevich</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: An explicit expression for the expected value of a regularized multiplicative functional under the sine-process is obtained by passing to the scaling limit in the Borodin-Okounkov-Geronimo-Case formula.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">The Expectation of a Multiplicative Functional under the Sine-Process</title>
   </titles>
   <publicationYear>2024</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="60B20">Random matrices (probabilistic aspects)</subject>
   </subjects>
   <language>:unkn</language>
   <resourceType resourceTypeGeneral=":none"/>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:902637785</identifier><datestamp>2025-03-21T20:07:07Z</datestamp><setSpec>26</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <identifier identifierType="ARXIV">2501.00441</identifier>
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">arXiv:2501.00441</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:902637785</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/902637785</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Muratori, Matteo</creatorName>
         <givenName>Muratori</givenName>
         <familyName>Matteo</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">muratori.matteo</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Somaglia, Jacopo</creatorName>
         <givenName>Somaglia</givenName>
         <familyName>Jacopo</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">somaglia.jacopo</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">Moduli of continuity and absolute continuity: any relation?</title>
   </titles>
   <publicationYear>2024</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="26A15">Continuity and related questions (modulus of continuity, semicontinuity, discontinuities, etc.) for real functions in one variable</subject>
      <subject subjectScheme="msc2020" classificationCode="26A30">Singular functions, Cantor functions, functions with other special properties</subject>
      <subject subjectScheme="msc2020" classificationCode="26A46">Absolutely continuous real functions in one variable</subject>
      <subject subjectScheme="msc2020" classificationCode="26A48">Monotonic functions, generalizations</subject>
   </subjects>
   <language>:unkn</language>
   <resourceType resourceTypeGeneral=":none"/>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:902638264</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>60</setSpec><setSpec>35</setSpec><setSpec>31</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <identifier identifierType="ARXIV">2501.00920</identifier>
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">arXiv:2501.00920</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:902638264</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/902638264</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Abdulla, Ugur G.</creatorName>
         <givenName>Abdulla</givenName>
         <familyName>Ugur G.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">abdulla.ugur-g</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: We prove the necessary and sufficient condition for the removability of the fundamental singularity, and equivalently for the unique solvability of the singular Dirichlet problem for the heat equation. In the measure-theoretical context the criterion determines whether the $h$-parabolic measure of the singularity point is null or positive. From the probabilistic point of view, the criterion presents an asymptotic law for conditional Brownian motion. In {\it U.G. Abdulla, J Math Phys, 65, 121503 (2024)} the Kolmogorov-Petrovsky-type test was established. Here we prove a new Wiener-type criterion for the ''geometric'' characterization of the removability of the fundamental singularity for arbitrary open sets in terms of the fine-topological thinness of the complementary set near the singularity point.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Wiener-type Criterion for the Removability of the Fundamental Singularity for the Heat Equation and its Consequences</title>
   </titles>
   <publicationYear>2025</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="35A21">Singularity in context of PDEs</subject>
      <subject subjectScheme="msc2020" classificationCode="35K05">Heat equation</subject>
      <subject subjectScheme="msc2020" classificationCode="35A21">Singularity in context of PDEs</subject>
      <subject subjectScheme="msc2020" classificationCode="35J25">Boundary value problems for second-order elliptic equations</subject>
      <subject subjectScheme="msc2020" classificationCode="31C05">Harmonic, subharmonic, superharmonic functions on other spaces</subject>
      <subject subjectScheme="msc2020" classificationCode="31C15">Potentials and capacities on other spaces</subject>
      <subject subjectScheme="msc2020" classificationCode="31C35">Martin boundary theory</subject>
      <subject subjectScheme="msc2020" classificationCode="31C40">Fine potential theory; fine properties of sets and functions</subject>
      <subject subjectScheme="msc2020" classificationCode="60J45">Probabilistic potential theory</subject>
      <subject subjectScheme="msc2020" classificationCode="60J60">Diffusion processes</subject>
      <subject subjectScheme="msc2020" classificationCode="60J65">Brownian motion</subject>
   </subjects>
   <language>:unkn</language>
   <resourceType resourceTypeGeneral=":none"/>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:902638641</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>46</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <identifier identifierType="ARXIV">2501.01297</identifier>
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">arXiv:2501.01297</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:902638641</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/902638641</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Sánchez, Félix Cabello</creatorName>
         <givenName>Sánchez</givenName>
         <familyName>Félix Cabello</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">cabello-sanchez.felix</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: We address a question by Henry Towsner about the possibility of representing linear operators between ultraproducts of Banach spaces by means of ultraproducts of nonlinear maps. We provide a bridge between these ''accessible'' operators and the theory of twisted sums through the so-called quasilinear maps. Thus, for many pairs of Banach spaces $X$ and $Y$, there is an ''accessible'' operator $X_U\to Y_U$ that is not the ultraproduct of a family of operators $X\to Y$ if and only if there is a short exact sequence of quasi-Banach spaces and operators $0\to Y\to Z\to X\to 0$ that does not split. We then adapt classical work by Ribe and Kalton--Peck to exhibit pretty concrete examples of accessible functionals and endomorphisms for the sequence spaces $\ell_p$. The paper is organized so that the main ideas are accessible to readers working on ultraproducts and requires only a rustic knowledge of Banach space theory.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Accessible operators on ultraproducts of Banach spaces</title>
   </titles>
   <publicationYear>2025</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="46M07">Ultraproducts in functional analysis</subject>
      <subject subjectScheme="msc2020" classificationCode="46M18">Homological methods in functional analysis (exact sequences, right inverses, lifting, etc.)</subject>
      <subject subjectScheme="msc2020" classificationCode="46B08">Ultraproduct techniques in Banach space theory</subject>
      <subject subjectScheme="msc2020" classificationCode="46A16">Not locally convex spaces (metrizable topological linear spaces, locally bounded spaces, quasi-Banach spaces, etc.)</subject>
   </subjects>
   <language>:unkn</language>
   <resourceType resourceTypeGeneral=":none"/>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:1649</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>53</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0731.53056</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:1649</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/1649</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Li, Anmin</creatorName>
         <givenName>Li</givenName>
         <familyName>Anmin</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">li.an-min</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Li, Jimin</creatorName>
         <givenName>Li</givenName>
         <familyName>Jimin</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">li.jimin</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Let M be an n-dimensional compact minimal submanifold in a unit sphere \(S^{n+1}\) of dimension \(n+p\). Denote by \(\| \sigma \|^ 2\) the square of the length of the second fundamental form. \textit{S. S. Chern} [Selected papers (1978; Zbl 0403.01012); pp. 393-409] proved that if \(\| \sigma \|^ 2\leq n/(2-1/p)\) everywhere on M, then either \(\| \sigma \|^ 2=0\) (i.e., M is totally geodesic) or \(\| \sigma \|^ 2=n/(2-1/p).\) In the latter case M is either a Clifford hypersurface or a Veronese surface in S. In this paper we get a pinching constant depending only on dim(M). The following theorem is proved. Theorem. Let M be an n-dimensional compact minimal submanifold in \(S^{n+p}\), \(p\geq 2\). If \(\| \sigma \|^ 2\leq 2n/3\) everywhere on M, then M is either a totally geodesic submanifold or a Veronese surface in \(S^ 4\). For \(p\geq 2\) our pinching constant is better than the pinching constants of \textit{Shen Yibing} [Sci. China, Ser. 32, No.7, 769-781 (1989; Zbl 0686.53056)].</description>
   </descriptions>
   <titles>
      <title xml:lang="en">An intrinsic rigidity theorem for minimal submanifolds in a sphere</title>
   </titles>
   <publicationYear>1992</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="53C42">Differential geometry of immersions (minimal, prescribed curvature, tight, etc.)</subject>
      <subject subjectScheme="keyword">pinching constant</subject>
      <subject subjectScheme="keyword">square of the length of the second fundamental form</subject>
      <subject subjectScheme="keyword">minimal submanifold</subject>
      <subject subjectScheme="keyword">totally geodesic submanifold</subject>
      <subject subjectScheme="keyword">Veronese surface</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:2808</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>93</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0850.93197</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:2808</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/2808</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Chen, Chi-Tsong</creatorName>
         <givenName>Chen</givenName>
         <familyName>Chi-Tsong</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">chen.chi-tsong</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">Techniques for identification of linear time-invariant multivariable systems</title>
   </titles>
   <publicationYear>1987</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="93B30">System identification</subject>
      <subject subjectScheme="msc2020" classificationCode="93C05">Linear systems in control theory</subject>
      <subject subjectScheme="msc2020" classificationCode="93C35">Multivariable systems, multidimensional control systems</subject>
      <subject subjectScheme="msc2020" classificationCode="93C99">Model systems in control theory</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">serial article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <firstPage>1</firstPage>
         <lastPage>34</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:3899</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>70</setSpec><setSpec>37</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0850.70167</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:3899</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/3899</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Dell'Antonio, G. F.</creatorName>
         <givenName>Dell'Antonio</givenName>
         <familyName>G. F.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">dellantonio.gian-fausto</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Onofrio, D'. B.</creatorName>
         <givenName>Onofrio</givenName>
         <familyName>D'. B.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">onofrio.db</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">On the number of families of periodic solutions of a Hamiltonian system near equilibrium. II</title>
   </titles>
   <publisher xml:lang="en">Nicola Zanichelli Editore, Bologna</publisher>
   <publicationYear>1989</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="70H05">Hamilton's equations</subject>
      <subject subjectScheme="msc2020" classificationCode="37G99">Local and nonlocal bifurcation theory for dynamical systems</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0392-4041</relatedItemIdentifier>
         <titles>
            <title>Bollettino della Unione Matemàtica Italiana. Serie VII. B</title>
         </titles>
         <publicationYear>1989</publicationYear>
         <volume>3</volume>
         <issue>3</issue>
         <firstPage>579</firstPage>
         <lastPage>590</lastPage>
         <publisher>Nicola Zanichelli Editore, Bologna</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:4031</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>35</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0785.35030</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:4031</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/4031</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Huang, Tzy-Wei</creatorName>
         <givenName>Huang</givenName>
         <familyName>Tzy-Wei</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">hwang.tzy-wei</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Kuo, Ts'ang-Hai</creatorName>
         <givenName>Kuo</givenName>
         <familyName>Ts'ang-Hai</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">kuo.tsanghai</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: We study the following quasilinear elliptic problem: find \(u\in H^ 1_ 0(\Omega)\cap L^ \infty(\Omega)\) such that \(-\sum^ N_{i,j=1}(\partial/\partial x_ i)(a_{ij}(x)\partial u/\partial x_ i)+g(x,u,\nabla u)=0\) where \(| g(x,r,\xi)|\leq h(| r|)+C|\xi|^ \theta\), \(0&lt;\theta&lt;4/N\). The existence of solutions is proved when \(g\) has subcritical growth in \(| r|\), i.e., \(\lim_{| r|\to+\infty} h(| r|) / | r|^ \beta = 0\) for some \(\beta\) satisfying \(1&lt;\beta&lt;(N+2)/(N-2)\). Furthermore, all solutions are \(H^ 1\) and \(L^ \infty\) bounded.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">On certain existence results for quasilinear elliptic equations</title>
   </titles>
   <publisher xml:lang="en">:unav</publisher>
   <publicationYear>1989</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="35J60">Nonlinear elliptic equations</subject>
      <subject subjectScheme="msc2000" classificationCode="35D05">Existence of generalized solutions of PDE</subject>
      <subject subjectScheme="keyword">quasilinear elliptic equations</subject>
      <subject subjectScheme="keyword">existence</subject>
      <subject subjectScheme="keyword">subcritical growth</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0379-7570</relatedItemIdentifier>
         <titles>
            <title>Chinese Journal of Mathematics</title>
         </titles>
         <publicationYear>1989</publicationYear>
         <volume>17</volume>
         <issue>2</issue>
         <firstPage>109</firstPage>
         <lastPage>116</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:4691</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>05</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0739.05084</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:4691</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/4691</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Han, Guo-Niu</creatorName>
         <givenName>Han</givenName>
         <familyName>Guo-Niu</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">han.guo-niu</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: Recently Foata and Zeilberger have proved a conjecture due to Marleen Denert that asserted that two pairs of statistics on the permutation group were equidistributed. The present note provides a combinatorial proof of this statement.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Distribution Euler-Mahonienne: Une correspondance. (Euler-Mahonian distribution: A correspondence)</title>
   </titles>
   <publisher xml:lang="en">Elsevier, Paris</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="05E99">Algebraic combinatorics</subject>
      <subject subjectScheme="keyword">pairs of statistics</subject>
   </subjects>
   <language>French</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0764-4442</relatedItemIdentifier>
         <titles>
            <title>Comptes Rendus de l'Académie des Sciences. Série I</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>310</volume>
         <issue>6</issue>
         <firstPage>311</firstPage>
         <lastPage>314</lastPage>
         <publisher>Elsevier, Paris</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:4784</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>05</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0737.05008</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:4784</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/4784</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Han, Guo-Niu</creatorName>
         <givenName>Han</givenName>
         <familyName>Guo-Niu</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">han.guo-niu</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: A bijection was constructed in [the author, ibid. No. 6, 311-314 (1990)]for the Foata-Zeilberger theorem on Denert's statistic. This note provides the construction of another bijection directly defined on the permutation group.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Une nouvelle bijection pour la statistique de Denert. (A new bijection for Denert's statistic)</title>
   </titles>
   <publisher xml:lang="en">Elsevier, Paris</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="05A05">Permutations, words, matrices</subject>
      <subject subjectScheme="keyword">Foata-Zeilberger theorem</subject>
      <subject subjectScheme="keyword">Denert's statistic</subject>
      <subject subjectScheme="keyword">permutation group</subject>
   </subjects>
   <language>French</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0764-4442</relatedItemIdentifier>
         <titles>
            <title>Comptes Rendus de l'Académie des Sciences. Série I</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>310</volume>
         <issue>7</issue>
         <firstPage>493</firstPage>
         <lastPage>496</lastPage>
         <publisher>Elsevier, Paris</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:4841</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>54</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0737.54017</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:4841</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/4841</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Nagata, Jun-iti</creatorName>
         <givenName>Nagata</givenName>
         <familyName>Jun-iti</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">nagata.jun-iti</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">[For the preceding parts see (Pt. I) Proc. 2nd Prague Topol. Symp. 1966, 259--270 (1967; Zbl 0161.42405), (Pt. II) Gen. Topol. Appl. 1, 65-77 (1971; Zbl 0212.27301), (Pt. III) Proc. Steklov Inst. Math. 154, 201--213 (1984); translation from Tr. Mat. Inst. Steklova 154, 186--199 (1983; Zbl 0584.54031).] This paper consists of a survey of the important developments in dimension theory during the last ten years with emphasis on major trends and the most interesting results in non-homological dimension theory. The three sections consist of \S1. Metrizable spaces (finite dimensional), \S2. Non-metrizable spaces, \S3. Infinite-dimensional spaces. In \S1 an outline is given for the progress obtained in the areas of embedding theory for \(n\)-dimensional spaces and J. de-Groot's conjecture for separable metric spaces. The two topics explored in \S2 are (i) extension of known results for metric spaces to non-metric spaces and (ii) exploration of new structural conditions under which some basic theorems hold for non-metrizable spaces. Finally, \S3 consists of three categories: (i) extension of theorems for finite dimension spaces to infinite dimensional spaces, (ii) study of properties peculiar to infinite-dimensional spaces and (iii) classification of infinite- dimensional spaces. A large list of references is also included which contains several other surveys.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">A survey of dimension theory. IV</title>
   </titles>
   <publisher xml:lang="en">Symposium of General Topology, Osaka</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="54F45">Dimension theory in general topology</subject>
      <subject subjectScheme="msc2020" classificationCode="54-02">Research exposition (monographs, survey articles) pertaining to general topology</subject>
      <subject subjectScheme="keyword">non-homological dimension theory</subject>
      <subject subjectScheme="keyword">embedding</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0918-4732</relatedItemIdentifier>
         <titles>
            <title>Questions and Answers in General Topology</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>8</volume>
         <issue>1</issue>
         <firstPage>61</firstPage>
         <lastPage>77</lastPage>
         <publisher>Symposium of General Topology, Osaka</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:4948</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>60</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0759.60032</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:4948</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/4948</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Shao, Qiman</creatorName>
         <givenName>Shao</givenName>
         <familyName>Qiman</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">shao.qi-man</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Let \(\{x_ n,k\geq 1\}\) be a sequence of random variables and \(S(n)=\sum^ n_{i=1}x_ i\). Let \({\mathcal F}_ k=\sigma(x_ i,1\leq i\leq k)\) and \({\mathcal F}^ b_ a=\sigma(x_ i,a\leq i\leq b)\) denote the sigma-fields generated by the random variables indicated in the brackets. We say that \(\{x_ n,k\geq 1\}\) is of \(\rho\)-mixing if \[ \sup_ k\sup_{\xi\in{\mathcal F}_ k}\sup_{\eta\in{\mathcal F}^{k+n}}|\text{cov}(\xi,\eta)|/\sqrt{\text{var}(\xi)\text{var}( \eta)} \leq\rho(n)\to 0. \] Suppose \(\{x_ n,k\geq 1\}\) is a sequence of \(\rho\)-mixing random variables with mean zero and \(\sum^ \infty_{n=1}\rho(n)\) \(\leq\infty\). Assume that \(\{x^ 2_ n,k\geq 1\}\) is uniformly integrable and \(\lim_{n\to\infty}ES^ 2(n)/n=\sigma^ 2&gt;0\). \(W_ n(t)=S([nt])/\sigma n^{1/2}\), \(t\in[0,1]\). Then \(W_ n(t)\) converges in distribution to a standard Wiener process.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">A remark on the invariance principle for \(\rho\)-mixing sequence of random variables</title>
   </titles>
   <publisher xml:lang="en">Fudan University, Shanghai</publisher>
   <publicationYear>1988</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="60F17">Functional limit theorems; invariance principles</subject>
      <subject subjectScheme="keyword">invariance principle</subject>
      <subject subjectScheme="keyword">\(\rho\)-mixing random variables</subject>
      <subject subjectScheme="keyword">Wiener process</subject>
   </subjects>
   <language>Chinese</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">1000-8314</relatedItemIdentifier>
         <titles>
            <title>Chinese Annals of Mathematics. Series A</title>
         </titles>
         <publicationYear>1988</publicationYear>
         <volume>9</volume>
         <issue>4</issue>
         <firstPage>409</firstPage>
         <lastPage>412</lastPage>
         <publisher>Fudan University, Shanghai</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:4954</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>60</setSpec><setSpec>30</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0749.60031</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:4954</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/4954</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Fan, Aihua</creatorName>
         <givenName>Fan</givenName>
         <familyName>Aihua</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">fan.ai-hua</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">The author proves the following principle of simplification: Let \((\Omega_ 1,{\mathcal F}_ 1,P_ 1)\) and \((\Omega_ 2,{\mathcal F}_ 2,P_ 2)\) be two probability spaces, \((B_ n)\) a sequence of separable Banach spaces, \((\varepsilon_ n)\) the Rademacher sequence defined on \(\Omega_ 1\), \(X_ n: \Omega_ n\to B_ n\) a sequence of independent symmetric random variables. If \((a_ n)\in\times_{n=1}^ \infty B_ n\), and [\((a_ n)\) has distribution property \(P^* \Rightarrow (\varepsilon_ n a_ n)\) has property \(P^{**} P_ 1\)-a.s.] then [if \((X_ n)\) has property \(P^*\;P_ 2\)-a.s.\(\Rightarrow(X_ n)\) has property \(P^{**} P_ 2\)-a.s.]. And, the author also got some applications.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Principle of simplification and its applications</title>
   </titles>
   <publisher xml:lang="en">Fudan University, Shanghai</publisher>
   <publicationYear>1989</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="60F99">Limit theorems in probability theory</subject>
      <subject subjectScheme="msc2020" classificationCode="30B20">Random power series in one complex variable</subject>
      <subject subjectScheme="keyword">principle of simplification</subject>
      <subject subjectScheme="keyword">separable Banach spaces</subject>
      <subject subjectScheme="keyword">Rademacher sequence</subject>
   </subjects>
   <language>Chinese</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">1000-8314</relatedItemIdentifier>
         <titles>
            <title>Chinese Annals of Mathematics. Series A</title>
         </titles>
         <publicationYear>1989</publicationYear>
         <volume>10</volume>
         <issue>3</issue>
         <firstPage>379</firstPage>
         <lastPage>386</lastPage>
         <publisher>Fudan University, Shanghai</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:5369</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>46</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0735.46029</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:5369</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/5369</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Li, Chen Kuan</creatorName>
         <givenName>Li</givenName>
         <familyName>Chen Kuan</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">li.chen-kuan</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Fisher, Brian</creatorName>
         <givenName>Fisher</givenName>
         <familyName>Brian</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">fisher.brian</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: A new definition of the neutrix of distributions on \(\mathbb{R}^ m\) is given. This enables neutrix product of \(\delta(x_ 1,\dots,x_ m)\) and inverse powers of \(r\), where \(r=(x_ 1^ 2+\cdots+x_ m^ 2)^{1/2}\).</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Example of the neutrix product of distributions on \(R^ m\)</title>
   </titles>
   <publisher xml:lang="en">Academy of Sciences and Arts of Bosnia and Herzegovina (Akademija Nauka i Umjetnosti Bosne i Hercegovine), Sarajevo</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="46F10">Operations with distributions and generalized functions</subject>
      <subject subjectScheme="keyword">neutrix of distributions</subject>
      <subject subjectScheme="keyword">neutrix product</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0352-6100</relatedItemIdentifier>
         <titles>
            <title>Radovi Matematički</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>6</volume>
         <issue>1</issue>
         <firstPage>129</firstPage>
         <lastPage>137</lastPage>
         <publisher>Academy of Sciences and Arts of Bosnia and Herzegovina (Akademija Nauka i Umjetnosti Bosne i Hercegovine), Sarajevo</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:5689</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>05</setSpec><setSpec>20</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0746.05072</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:5689</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/5689</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Sabidussi, Gert</creatorName>
         <givenName>Sabidussi</givenName>
         <familyName>Gert</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">sabidussi.gert</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">This paper generalizes the ideas of \textit{W. Imrich} and \textit{H. Izbicky} [Monatsh. Math. 80, 277-281 (1975; Zbl 0328.05136)] who had determined all (namely 10) associative graph multiplications with the property that the graph product \(XY\) depends on both of the factors. The author investigates the general question which balanced equations \(w_ 1=w_ 2\) (in the sense of universal algebra: \(w_ 1\), \(w_ 2\) are words in a free groupoid) are ``satisfied'' by which graph multiplication in the way that after replacing the variables in \(w_ 1\), \(w_ 2\) by arbitrary graphs the arising product-graphs \(W_ 1\), \(W_ 2\) are always canonical isomorphic, i.e., the natural bijection \(V(W_ 1)\to V(W_ 2)\) of the vertex sets is an isomorphism from \(W_ 1\) onto \(W_ 2\). If the two sides of \(w_ 1=w_ 2\) differ only by the bracketing of the variables the equation is called isototonic. Graph multiplications considered here are binary operations in the class of (undirected, simple) graphs such that in each case for graphs \(X\), \(Y\) the product \(XY\) is a graph with \(V(XY)=V(X)\times V(Y)\) and locally defined adjacency, i.e., for any vertices \((u,v),(u',v')\in V(XY)\) the adjacency value \(\alpha_{XY}((u,v),(u',v'))\) depends only on \(\alpha_ X(u,u')\) and \(\alpha_ Y(v,v')\), where \(\alpha_ X(u,u')\) is defined to be \(e\) or \(a\) or \(\bar a\) iff \(u=u'\), or \(u,u'\) are adjacent in \(X\) or \(u\neq u'\) are nonadjacent in \(X\), respectively, and \(A=\{e,a,\bar a\}\) is a fixed set of three symbols. Then every graph multiplication corresponds to a binary operation (multiplication) \(\cdot\) in \(A\) with the property that \(e\) is a weakly regular idempotent in the groupoid \((A,\cdot)\) (i.e., \(xy=e\) iff \(x=y=e\), for all \(x,y\in A\)); \((A,\cdot)\) is called the adjacency groupoid of the graph multiplication. Now it is proved that a balanced equation is satisfied by a graph multiplication iff it is satisfied by the corresponding adjacency groupoid. Therefore, the problem mentioned in the beginning is equivalent to the question for the validity of given equations in certain groupoids. Using groupoid-theoretic methods the author obtains two main results on such groupoids the graph-theoretic version of which reads as follows: The only non-associative graph multiplications satisfying an isotonic equation and fulfilling the property that the graph product \(XY\) depends on both of the factors (i.e., the multiplication table of the adjacency groupoid \((A,\cdot)\) consists of pairwise distinct rows and pairwise distinct columns) and either 1. the fibres corresponding to one of the two factors are preserved (i.e., \((A,\cdot)\) has a left or a right unit element), or 2. the isotonic equation contains only 4 variables, are the four graph multiplications defined by \(X\cdot_ 1Y:=\overline{X}\circ Y\), \(X\cdot_ 2 Y:=Y\circ\overline{X}\), \(X\cdot'_ 1 Y:=\overline{Y}\circ X\), \(X\cdot'_ 2 Y:=X\circ\overline{Y}\), where \(X\circ Y\) denotes the lexicographic product of \(X\) and \(Y\), and \(\overline{X}\) the complement graph of \(X\).</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Gleichungen für nichtassoziative Graphenprodukte. Equations for non- associative graph products</title>
   </titles>
   <publisher xml:lang="en">Verlag der Österreichischen Akademie der Wissenschaften, Wien</publisher>
   <publicationYear>1989</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="05C99">Graph theory</subject>
      <subject subjectScheme="msc2020" classificationCode="20N02">Sets with a single binary operation (groupoids)</subject>
      <subject subjectScheme="msc2020" classificationCode="05C75">Structural characterization of families of graphs</subject>
      <subject subjectScheme="keyword">graph products</subject>
      <subject subjectScheme="keyword">balanced equations</subject>
      <subject subjectScheme="keyword">Graph multiplications</subject>
      <subject subjectScheme="keyword">adjacency groupoid</subject>
   </subjects>
   <language>German</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0723-9319</relatedItemIdentifier>
         <titles>
            <title>Sitzungsberichte. Abteilung II. Österreichische Akademie der Wissenschaften, Mathematisch-Naturwissenschaftliche Klasse</title>
         </titles>
         <publicationYear>1989</publicationYear>
         <volume>198</volume>
         <issue>4-7</issue>
         <firstPage>249</firstPage>
         <lastPage>265</lastPage>
         <publisher>Verlag der Österreichischen Akademie der Wissenschaften, Wien</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:5956</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>62</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0742.62096</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:5956</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/5956</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Aly, Emad-Eldin A. A.</creatorName>
         <givenName>Aly</givenName>
         <familyName>Emad-Eldin A. A.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">aly.emad-eldin-a-a</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Let \(F\) be a continuous life distribution function, \(\overline F =1-F\) be its survival function and \(F^{-1}\) be its generalized inverse. \(F\) is said to be an increasing failure rate average (IFRA) distribution if and only if \(-\log \overline F (bx)\leq-b \log \overline F (x)\) for all \(x\geq 0\) and \(0\leq b\leq 1\). \(F\) is said to be a new better than used (NBU) distribution if and only if \(\overline F (x+y)\leq\overline F (x)\overline F (y)\) for all \(x,y\geq 0\). \textit{J. V. Deshpande} [Biometrika 70, 514-518 (1983; Zbl 0519.62088)] proposed a class of tests for testing exponentiality against IFRA and NBU alternatives. \textit{E. A. Aly} [Metrika 36, No. 5, 255-267 (1989; Zbl 0705.62048)] proposed a larger class of tests for the same problem for both the noncensored and the randomly censored cases. In this paper, we extend the tests of Deshpande and Aly to the type II censored case.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Testing exponentiality against IFRA or NBU alternatives with type II censored data</title>
   </titles>
   <publisher xml:lang="en">Oldenbourg Verlag, München</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="62N05">Reliability and life testing</subject>
      <subject subjectScheme="msc2020" classificationCode="62G10">Nonparametric hypothesis testing</subject>
      <subject subjectScheme="keyword">Brownian bridge</subject>
      <subject subjectScheme="keyword">convergence in distribution</subject>
      <subject subjectScheme="keyword">Pitman efficiency</subject>
      <subject subjectScheme="keyword">IFRA alternatives</subject>
      <subject subjectScheme="keyword">continuous life distribution</subject>
      <subject subjectScheme="keyword">survival function</subject>
      <subject subjectScheme="keyword">generalized inverse</subject>
      <subject subjectScheme="keyword">increasing failure rate average</subject>
      <subject subjectScheme="keyword">new better than used</subject>
      <subject subjectScheme="keyword">testing exponentiality</subject>
      <subject subjectScheme="keyword">NBU alternatives</subject>
      <subject subjectScheme="keyword">type II censored case</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0721-2631</relatedItemIdentifier>
         <titles>
            <title>Statistics \&amp; Decisions</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>8</volume>
         <issue>3</issue>
         <firstPage>265</firstPage>
         <lastPage>269</lastPage>
         <publisher>Oldenbourg Verlag, München</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:6074</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>34</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0744.34049</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:6074</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/6074</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Liao, Xiaoxin</creatorName>
         <givenName>Liao</givenName>
         <familyName>Xiaoxin</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">liao.xiao-xin</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Wu, Weihua</creatorName>
         <givenName>Wu</givenName>
         <familyName>Weihua</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">wu.weihua</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">The authors present a series of theorems on necessary and sufficient conditions for stability, attractability and boundedness with respect to a part of the variables, for time-varying linear systems (1) \(dx/dt=A(t)x\), \(x\in\mathbb{R}^ n\). The conditions are formulated in terms of the intercept matrix \(K_ m(t,t_ 0)=E_ mK(t,t_ 0)\) where \(K(t,t_ 0)\) is the Cauchy matrix of system (1), and \(E_ m\) denotes the \(n\times n\) matrix \(E_ m=\left({I_ m\atop0}{0\atop0}\right)\), \(1 \leq m &lt; n\).</description>
   </descriptions>
   <titles>
      <title xml:lang="en">The necessary and sufficient conditions of partial stability for linear dynamical systems</title>
   </titles>
   <publisher xml:lang="en">Science in China Press, Beijing; Springer, Heidelberg</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="34D20">Stability of solutions to ordinary differential equations</subject>
      <subject subjectScheme="msc2020" classificationCode="34A30">Linear ordinary differential equations and systems</subject>
      <subject subjectScheme="keyword">necessary and sufficient conditions</subject>
      <subject subjectScheme="keyword">stability</subject>
      <subject subjectScheme="keyword">attractability</subject>
      <subject subjectScheme="keyword">boundedness</subject>
      <subject subjectScheme="keyword">part of the variables</subject>
      <subject subjectScheme="keyword">time-varying linear systems</subject>
      <subject subjectScheme="keyword">intercept matrix</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">1001-6538</relatedItemIdentifier>
         <titles>
            <title>Chinese Science Bulletin</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>35</volume>
         <issue>11</issue>
         <firstPage>899</firstPage>
         <lastPage>903</lastPage>
         <publisher>Science in China Press, Beijing; Springer, Heidelberg</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:6088</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>60</setSpec><setSpec>11</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0752.11032</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:6088</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/6088</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Liu, Wen</creatorName>
         <givenName>Liu</givenName>
         <familyName>Wen</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">liu.wen</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Tomkins, R. J.</creatorName>
         <givenName>Tomkins</givenName>
         <familyName>R. J.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">tomkins.r-james</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Wang, C. L.</creatorName>
         <givenName>Wang</givenName>
         <familyName>C. L.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">wang.chung-lie</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">The authors present a generalization of the dyadic expansion of real numbers and study some probabilistic properties of these expansions. After establishing a key lemma for real sequences they describe the generalized binary expansions in detail and provide conditions under which these expansions obey the strong law of large numbers.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Generalized expansions of real numbers and their probabilistic properties</title>
   </titles>
   <publisher xml:lang="en">Wuhan University, Wuchang</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="11K55">Metric theory of other algorithms and expansions; measure and Hausdorff dimension</subject>
      <subject subjectScheme="msc2020" classificationCode="60F15">Strong limit theorems</subject>
      <subject subjectScheme="keyword">dyadic expansion</subject>
      <subject subjectScheme="keyword">generalized binary expansions</subject>
      <subject subjectScheme="keyword">strong law of large numbers</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0255-7797</relatedItemIdentifier>
         <titles>
            <title>Journal of Mathematics. Wuhan University</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>10</volume>
         <issue>1</issue>
         <firstPage>61</firstPage>
         <lastPage>72</lastPage>
         <publisher>Wuhan University, Wuchang</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:6712</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>34</setSpec><setSpec>11</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0741.11031</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:6712</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/6712</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Galochkin, A. I.</creatorName>
         <givenName>Galochkin</givenName>
         <familyName>A. I.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">galochkin.aleksandr-ivanovich</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">See the review in Zbl 0711.11025.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Estimates for conjugate linear forms</title>
   </titles>
   <publisher xml:lang="en">Springer US, New York, NY; Pleiades Publishing (Allerton Press), New York, NY; MAIK ``Nauka/Interperiodica'', Moscow</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="11J13">Simultaneous homogeneous approximation, linear forms</subject>
      <subject subjectScheme="msc2020" classificationCode="11J82">Measures of irrationality and of transcendence</subject>
      <subject subjectScheme="msc2020" classificationCode="11J91">Transcendence theory of other special functions</subject>
      <subject subjectScheme="msc2020" classificationCode="34A30">Linear ordinary differential equations and systems</subject>
      <subject subjectScheme="keyword">linear form of \(KE\)-functions</subject>
      <subject subjectScheme="keyword">conjugate linear forms</subject>
      <subject subjectScheme="keyword">linear homogeneous differential equations</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0027-1322</relatedItemIdentifier>
         <titles>
            <title>Moscow University Mathematics Bulletin</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>45</volume>
         <issue>5</issue>
         <firstPage>24</firstPage>
         <lastPage>26</lastPage>
         <publisher>Springer US, New York, NY; Pleiades Publishing (Allerton Press), New York, NY; MAIK ``Nauka/Interperiodica'', Moscow</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:6778</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>93</setSpec><setSpec>49</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0736.49021</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:6778</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/6778</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Popov, V. A.</creatorName>
         <givenName>Popov</givenName>
         <familyName>V. A.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">popov.v-a</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">A method of successive approximations for the solution of optimal control problems governed by ordinary differential equations is considered. It had previously been introduced by \textit{I. A. Krylov} and \textit{F. L. Chernous'ko} [U.S.S.R. Comput. Math. Math. Phys. 1963, 1371--1382 (1964); translation from Zh. Vychisl. Mat. Mat. Fiz. 2, 1132--1139 (1962; Zbl 0154.10402)] and is based on Pontryagin's maximum principle. The author considers problems in which the argument of the maximum of the Hamiltonian is a Lipschitzian function of the system state and of the conjugate state. For such problems the convergence of the method to an extremal pair is established and the rate of convergence is estimated. Under additional but natural conditions the convergence to an optimal pair is demonstrated. The results obtained include systems which are nonlinear in state and control.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Convergence of the method of successive approximations in optimal control problems</title>
   </titles>
   <publisher xml:lang="en">Consultants Bureau, New York</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="49M05">Numerical methods based on necessary conditions</subject>
      <subject subjectScheme="msc2020" classificationCode="49K15">Optimality conditions for problems involving ordinary differential equations</subject>
      <subject subjectScheme="msc2020" classificationCode="93C15">Control/observation systems governed by ordinary differential equations</subject>
      <subject subjectScheme="msc2020" classificationCode="93C10">Nonlinear systems in control theory</subject>
      <subject subjectScheme="keyword">successive approximations</subject>
      <subject subjectScheme="keyword">rate of convergence</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0012-2661</relatedItemIdentifier>
         <titles>
            <title>Differential Equations</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>26</volume>
         <issue>12</issue>
         <firstPage>1546</firstPage>
         <lastPage>1556</lastPage>
         <publisher>Consultants Bureau, New York</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:6826</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>46</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0751.46015</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:6826</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/6826</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Cho, Yeol Je</creatorName>
         <givenName>Cho</givenName>
         <familyName>Yeol Je</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">cho.yeol-je</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Freese, Raymond W.</creatorName>
         <givenName>Freese</givenName>
         <familyName>Raymond W.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">freese.raymond-w</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: We give some isometry conditions in linear 2-normed spaces for the function \(g(x)=f(x)-f(0)\) to be linear, where \(f\) is a function from a linear 2-normed space \((X,\|\cdot,\cdot\|)\) into a normed linear space \((Y,\|\cdot\|)\).</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Isometry conditions in linear 2-normed spaces</title>
   </titles>
   <publisher xml:lang="en">:unav</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="46A70">Saks spaces and their duals (strict topologies, mixed topologies, two-norm spaces, co-Saks spaces, etc.)</subject>
      <subject subjectScheme="keyword">isometry conditions</subject>
      <subject subjectScheme="keyword">linear 2-normed spaces</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0025-5513</relatedItemIdentifier>
         <titles>
            <title>Mathematica Japonica</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>35</volume>
         <issue>5</issue>
         <firstPage>985</firstPage>
         <lastPage>990</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:7005</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>65</setSpec><setSpec>45</setSpec><setSpec>74</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0737.73071</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:7005</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/7005</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Zozulya, V. V.</creatorName>
         <givenName>Zozulya</givenName>
         <familyName>V. V.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">zozulya.volodymyr-v</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: The three-dimensional problem on dynamic loading of an infinite body with a crack is considered. The possibility of contact of the opposite crack sides with friction is taken into account. An algorithm to solve the system of singular integral equations with constraints in the form of inequalities is developed. The convergence of the suggested algorithm is proven.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">On solvability of dynamic problems of the theory of cracks with domains of contact, adhesion and slip</title>
   </titles>
   <publisher xml:lang="en">Academy of Sciences of the Ukrainian Soviet Socialist Republic - UkrSSR (Akademiya Nauk Ukrainskoĭ SSR)</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="74R99">Fracture and damage</subject>
      <subject subjectScheme="msc2020" classificationCode="45E05">Integral equations with kernels of Cauchy type</subject>
      <subject subjectScheme="msc2020" classificationCode="65R20">Numerical methods for integral equations</subject>
      <subject subjectScheme="keyword">three-dimensional problem</subject>
      <subject subjectScheme="keyword">dynamic loading</subject>
      <subject subjectScheme="keyword">infinite body</subject>
      <subject subjectScheme="keyword">system of singular integral equations</subject>
      <subject subjectScheme="keyword">convergence</subject>
   </subjects>
   <language>Russian</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0201-8446</relatedItemIdentifier>
         <titles>
            <title>Doklady Akademii Nauk Ukrainskoĭ SSR, Seriya A</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>1990</volume>
         <issue>3</issue>
         <firstPage>53</firstPage>
         <lastPage>55</lastPage>
         <publisher>Academy of Sciences of the Ukrainian Soviet Socialist Republic - UkrSSR (Akademiya Nauk Ukrainskoĭ SSR)</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:7217</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>47</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0752.47026</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:7217</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/7217</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">You, Zhaoyong</creatorName>
         <givenName>You</givenName>
         <familyName>Zhaoyong</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">you.zhaoyong</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Xu, Hongkun</creatorName>
         <givenName>Xu</givenName>
         <familyName>Hongkun</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">xu.hong-kun</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">The authors present an ergodic convergence theorem for mappings of asymptotically non-expansive type in Hilbert spaces, which generalizes that of \textit{J. B. Baillon's} results [C. R. Acad. Sci., Paris, Sér. A 280, 1511-1514 (1975; Zbl 0307.47006)] for nonexpansive mappings.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">An ergodic convergence theorem for mappings of asymptotically non- expansive type</title>
   </titles>
   <publisher xml:lang="en">Fudan University, Shanghai</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="47H10">Fixed-point theorems</subject>
      <subject subjectScheme="msc2020" classificationCode="47H09">Contraction-type mappings, nonexpansive mappings, \(A\)-proper mappings, etc.</subject>
      <subject subjectScheme="msc2020" classificationCode="47H20">Semigroups of nonlinear operators</subject>
      <subject subjectScheme="keyword">ergodic convergence theorem</subject>
      <subject subjectScheme="keyword">mappings of asymptotically non-expansive type in Hilbert spaces</subject>
   </subjects>
   <language>Chinese</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">1000-8314</relatedItemIdentifier>
         <titles>
            <title>Chinese Annals of Mathematics. Series A</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>11</volume>
         <issue>4</issue>
         <firstPage>519</firstPage>
         <lastPage>523</lastPage>
         <publisher>Fudan University, Shanghai</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:7725</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>05</setSpec><setSpec>20</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0745.20006</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:7725</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/7725</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Shiu, Wai-Chee</creatorName>
         <givenName>Shiu</givenName>
         <familyName>Wai-Chee</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">shiu.wai-chee</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: Let \(G\) be a finite group and \({\mathcal P}=\{D_ 0=\{e\}, D_ 1,\dots,D_ d\}\) be a partition of \(G\). Suppose, for each \(i,j\), \(0\leq i,j\leq d\), \(\{g\in G\mid g^{-1}\in D_ i\}=D_{i^*}\in{\mathcal P}\) for some \(0\leq i^* \leq d\) and \(\bar D_ i\bar D_ j=\sum^ d_{k=0}p^ k_{ij}\bar D_ k\) where \(\bar D_ m=\sum_{g\in D_ m}g\in\mathbb{C}[G]\). Then the subalgebra of \(\mathbb{C}[G]\) spanned by \(\bar D_ 0,\dots,\bar D_ d\) is called a Schur ring (\(S\)-ring). Such an object is known to have applications in group theory and combinatorial design theory. In this paper we study the structure of Schur rings over dihedral groups \({\mathfrak D}_ n\). Special attention is paid to the case when \(n=p\), where \(p\) is an odd prime.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Schur rings over dihedral groups</title>
   </titles>
   <publisher xml:lang="en">:unav</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="20C05">Group rings of finite groups and their modules (group-theoretic aspects)</subject>
      <subject subjectScheme="msc2020" classificationCode="20D60">Arithmetic and combinatorial problems involving abstract finite groups</subject>
      <subject subjectScheme="msc2020" classificationCode="05B10">Combinatorial aspects of difference sets (number-theoretic, group-theoretic, etc.)</subject>
      <subject subjectScheme="keyword">finite group</subject>
      <subject subjectScheme="keyword">partition</subject>
      <subject subjectScheme="keyword">Schur rings</subject>
      <subject subjectScheme="keyword">dihedral groups</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0379-7570</relatedItemIdentifier>
         <titles>
            <title>Chinese Journal of Mathematics</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>18</volume>
         <issue>3</issue>
         <firstPage>209</firstPage>
         <lastPage>223</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:7737</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>34</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0739.34024</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:7737</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/7737</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Carbone, A.</creatorName>
         <givenName>Carbone</givenName>
         <familyName>A.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">carbone.antonio.1</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Conti, G.</creatorName>
         <givenName>Conti</givenName>
         <familyName>G.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">conti.giulia</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Marino, G.</creatorName>
         <givenName>Marino</givenName>
         <familyName>G.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">marino.giuseppe</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Let \(I=[a,b]\) be a compact interval; \(A(t,x)\) continuous on \(I\times R^ n\); \(F:I\times R^ n\to R^ n\) a compact, convex-valued multivalued map; \(\omega(t,x)\) a continuous function defined on an open connected set \(\Omega\subset R^ 2\); \(L:C(I,R^ n)\to R^ n\) a linear and continuous operator; \(H:C(I,R^ n)\to R^ n\) a continuous operator. Assume that 1) \(\| F(t,x)\|\leq\beta(t)+\alpha(t)\| x\|\) for some \(\alpha,\beta\in L^ 1\); 2) \(\| A(t,x)x\|+\| F(t,x)\|\leq\omega(t,\| x\|)\); 3) \(\| H(u)-L\int^ \tau_ aE_ u(\tau,s)f_ u(s)ds\|\leq\eta\), \(\eta&gt;0\), \(\forall u\in C(I,R^ n)\) and every selection \(f_ u\); 4) for every \(u\in C(I,R^ n)\) fixed, there exists a linear operator \(\Lambda_ u:R^ n\to\hbox{Ker} {\mathcal D}_ u\) such that \(u\to\Lambda_ u\) is continuous with respect to \(u\); \(\exists\lambda&gt;0\) such that \(\|\Lambda_ u\|\leq m\) \(\forall u\in C(I,R^ n)\); \((I-L^ u_ 0\Lambda_ u)(H(u)-L\int^ \tau_ aE_ u(\tau,s)f_ n(s)ds)=0\) for every selection \(f_ u\). Then the problem \(x'\in A(t,x)x+F(t,x) Lx=H(x)\) admits at least one solution.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">A nonlinear boundary-value problem for multivalued differential systems</title>
   </titles>
   <publisher xml:lang="en">:unav</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="34B15">Nonlinear boundary value problems for ordinary differential equations</subject>
      <subject subjectScheme="msc2020" classificationCode="34A60">Ordinary differential inclusions</subject>
      <subject subjectScheme="keyword">nonlinear boundary value problem</subject>
      <subject subjectScheme="keyword">multivalued map</subject>
      <subject subjectScheme="keyword">linear operator</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0041-8986</relatedItemIdentifier>
         <titles>
            <title>Atti del Seminario Matematico e Fisico dell'Università di Modena</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>38</volume>
         <issue>2</issue>
         <firstPage>493</firstPage>
         <lastPage>509</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:7762</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>33</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0735.33010</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:7762</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/7762</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Singh, R. K.</creatorName>
         <givenName>Singh</givenName>
         <familyName>R. K.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">singh.r-k-p</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Singh, D. N.</creatorName>
         <givenName>Singh</givenName>
         <familyName>D. N.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">singh.d-n</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">Finite difference formula for the generalized polynomial set \(T^*_ n (x,y)\)</title>
   </titles>
   <publisher xml:lang="en">Kumar Pankaj, Siwan, Bihar, India; I.M. Prasad, Siwan, Bihar, India</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="33C99">Hypergeometric functions</subject>
      <subject subjectScheme="keyword">generating function</subject>
      <subject subjectScheme="keyword">finite difference formulas</subject>
      <subject subjectScheme="keyword">polynomial set</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0047-6269</relatedItemIdentifier>
         <titles>
            <title>The Mathematics Education</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>24</volume>
         <issue>2</issue>
         <firstPage>93</firstPage>
         <lastPage>97</lastPage>
         <publisher>Kumar Pankaj, Siwan, Bihar, India; I.M. Prasad, Siwan, Bihar, India</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:7816</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>62</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0743.62030</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:7816</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/7816</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Wand, Matthew P.</creatorName>
         <givenName>Wand</givenName>
         <familyName>Matthew P.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">wand.matthew-p</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: The nonparametric estimation of regression functions with a fixed design on the interval \([0,1]\) is considered. \textit{T. Gasser} and \textit{H.-G. Müller} [Smoothing techniques for curve estimation, Proc. Workshop, Heidelberg 1979, Lect. Notes Math. 757, 23-68 (1979; Zbl 0418.62033), and Scand. J. Stat., Theory Appl. 11, 171-185 (1984, Zbl 0548.62028)] introduced a class of kernel estimators for this problem and derived optimal rates of convergence of the estimator with respect to mean squared error and integrated mean squared error. Alternative measures of loss are those based on the \(L_ 1\) metric. These have simple intuitive interpretations such as the ``area between the two curves'' for global estimation and the ``absolute distance between the two points'' for local estimation. In this note we derive optimal rates of convergence for \(L_ 1\)-based measures of loss: mean absolute error and integrated mean absolute error. We demonstrate that there is little difference between \(L_ 1\)- optimality and \(L_ 2\)-optimality for nonparametric kernel regression.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">On exact \(L_ 1\) rates of convergence in non-parametric kernel regression</title>
   </titles>
   <publisher xml:lang="en">Wiley (Wiley-Blackwell), Oxford</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="62G07">Density estimation</subject>
      <subject subjectScheme="msc2020" classificationCode="62G20">Asymptotic properties of nonparametric inference</subject>
      <subject subjectScheme="keyword">window width</subject>
      <subject subjectScheme="keyword">L1- metric</subject>
      <subject subjectScheme="keyword">nonparametric regression</subject>
      <subject subjectScheme="keyword">kernel estimators</subject>
      <subject subjectScheme="keyword">optimal rates of convergence</subject>
      <subject subjectScheme="keyword">mean absolute error</subject>
      <subject subjectScheme="keyword">integrated mean absolute error</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0303-6898</relatedItemIdentifier>
         <titles>
            <title>Scandinavian Journal of Statistics</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>17</volume>
         <issue>3</issue>
         <firstPage>251</firstPage>
         <lastPage>256</lastPage>
         <publisher>Wiley (Wiley-Blackwell), Oxford</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:9306</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>47</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0759.47028</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:9306</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/9306</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Carbone, Antonio</creatorName>
         <givenName>Carbone</givenName>
         <familyName>Antonio</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">carbone.antonio.1</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Trombetta, Giulio</creatorName>
         <givenName>Trombetta</givenName>
         <familyName>Giulio</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">trombetta.giulio</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Let \(C\) be a nonempty closed convex subset of a Hilbert space \(X\) and let \(f: C\to X\) be continuous. Among sufficient conditions for the existence of a \(u\in C\) with \(\| u-f(u)\|=\inf\{\| x-f(x)\|\): \(x\in C\}\) there is the closedness hypothesis on the set \((I-f)(C)\). Following \textit{W. V. Petryshyn} [Trans. Am. Math. Soc. 182, 323-352 (1973; Zbl 0277.47033)], the authors make the observation that in some results of \textit{T. C. Lin} and \textit{C. L. Yen} [J. Approx. Theory 52, 141-148 (1988; Zbl 0643.47053)] and \textit{T. C. Lin} [Can. Math. Bull. 22, 513-515 (1979; Zbl 0429.47019)] the closedness hypothesis on the set \((I-f)(C)\) can be relaxed to the assumption: \(0\in \overline{(I-f)(C)}\) implies \(0\in(I- f)(C)\).</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Petryshyn's condition for Ky Fan type theorem</title>
   </titles>
   <publisher xml:lang="en">Vijnana Parishad of India c/o Dayanand Vedic Postgraduate College, Orai, Uttar Pradesh, India</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="47H10">Fixed-point theorems</subject>
      <subject subjectScheme="keyword">Ky Fan type theorem</subject>
      <subject subjectScheme="keyword">Petryshyn's condition</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0304-9892</relatedItemIdentifier>
         <titles>
            <title>Jnanabha</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>20</volume>
         <firstPage>93</firstPage>
         <lastPage>96</lastPage>
         <publisher>Vijnana Parishad of India c/o Dayanand Vedic Postgraduate College, Orai, Uttar Pradesh, India</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:10335</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>35</setSpec><setSpec>37</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0738.58022</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:10335</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/10335</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Li, Yishen</creatorName>
         <givenName>Li</givenName>
         <familyName>Yishen</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">li.yishen</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Cheng, Yi</creatorName>
         <givenName>Cheng</givenName>
         <familyName>Yi</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">cheng.yi.2</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">The first part of this paper discusses general methods of constructing symmetries and conserved quantities of \(1+1\)-dimensional integrable Hamiltonian systems. Two different types of symmetries, called \(K\)- and \(\tau\)-symmetries (first discussed by the authors in Topics in soliton theory and exactly solvable nonlinear equations, Proc. Conf. Nonlinear Evol. Equations, Solitons, Inverse Scattering Transform, Oberwolfach/Ger. 1986, 216-229 (1987); and by \textit{H. H. Chen}, \textit{Y. C. Lee} and \textit{J. E. Lin} in Physica D 9, 439-445 (1983; Zbl 0591.35054)) are associated to integrable systems. The authors prove that the hierarchy \(u_ t=\Phi^ lK_ 0(u)\), \(l=0,1,2,\ldots\) has two strings of infinite numbers of symmetries \(K\)-symmetries: \(K_ n=\Phi^ nK_ 0\), \(n=0,1,2,\ldots\) \(\tau\)-symmetries: \(\tau^{(l)}_ n=(\alpha l+\beta)tK_{n+l- 1}+\sigma_ n\), \(n=0,1,2,\ldots\) and that these form an infinite dimensional Lie algebra. Here \(u\) is an element in Schwartz space, \(\Phi\) is an operator, \(K_ 0\), \(\sigma_ 0\) are fixed tangent vectors and \(\alpha\), \(\beta\) are parameters, all satisfying certain conditions. Conserved quantities are constructed assuming the existence of a symplectic operator \(\theta\) and an integer \(h\) satisfying some conditions. In the second part of the paper, concrete examples are discussed, i.e. a list of the quantities \(\Phi\), \(K_ 0,\sigma_ 0,\alpha,\beta,\theta,h\) is given for the following systems: AKNS, Kaup-Newell, Levi, KdV, Boussinesq, Jaulent-Miodek, dispersive long waves, Toda, coupled non-linear waves, Burgers.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Symmetries in (1+1)-dimensional integrable system with their algebraic structures and conserved quantities</title>
   </titles>
   <publisher xml:lang="en">International Academic Publishers, Beijing; Zhengzhou University, Henan; published electronically by Global-Science Press starting from 2008</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="37J35">Completely integrable finite-dimensional Hamiltonian systems, integration methods, integrability tests</subject>
      <subject subjectScheme="msc2020" classificationCode="37K10">Completely integrable infinite-dimensional Hamiltonian and Lagrangian systems, integration methods, integrability tests, integrable hierarchies (KdV, KP, Toda, etc.)</subject>
      <subject subjectScheme="msc2000" classificationCode="35Q58">Other completely integrable PDE</subject>
      <subject subjectScheme="keyword">completely integrable systems</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">1000-940X</relatedItemIdentifier>
         <titles>
            <title>Journal of Partial Differential Equations</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>3</volume>
         <issue>4</issue>
         <firstPage>17</firstPage>
         <lastPage>30</lastPage>
         <publisher>International Academic Publishers, Beijing; Zhengzhou University, Henan; published electronically by Global-Science Press starting from 2008</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:10373</identifier><datestamp>2025-03-21T20:07:08Z</datestamp><setSpec>46</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0774.46012</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:10373</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/10373</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Beekmann, Wolfgang</creatorName>
         <givenName>Beekmann</givenName>
         <familyName>Wolfgang</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">beekmann.wolfgang</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Chang, Shao-Chien</creatorName>
         <givenName>Chang</givenName>
         <familyName>Shao-Chien</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">chang.shao-chien</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: For an \(FK\)-space \(X\), we let the distinguished subsets \(S(X)\), \(W(X)\), \(F(X)\) and \(B(X)\) of \(X\) be the set of all sectionally convergent sequences, sectionally weakly convergent sequences, sectionally weakly Cauchy sequences and sectionally bounded sequences, respectively. We discuss some inclusion relations among the sums of these subsets and the sums of \(FK\)-spaces. Thus we can answer some questions raised earlier by \textit{R. DeVos}, Math. Z. 192, 447-451 (1986; Zbl 0627.46006).</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Sums of \(FK\)-spaces</title>
   </titles>
   <publisher xml:lang="en">Academy of Science of the Royal Society of Canada c/o Carleton University, School of Mathematics and Statistics, Ottawa, ON</publisher>
   <publicationYear>1991</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="46A45">Sequence spaces (including Köthe sequence spaces)</subject>
      <subject subjectScheme="keyword">\(FK\)-space</subject>
      <subject subjectScheme="keyword">distinguished subsets</subject>
      <subject subjectScheme="keyword">sectionally convergent sequences</subject>
      <subject subjectScheme="keyword">sectionally weakly convergent sequences</subject>
      <subject subjectScheme="keyword">sectionally weakly Cauchy sequences</subject>
      <subject subjectScheme="keyword">sectionally bounded sequences</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0706-1994</relatedItemIdentifier>
         <titles>
            <title>Comptes Rendus Mathématiques de l'Académie des Sciences</title>
         </titles>
         <publicationYear>1991</publicationYear>
         <volume>13</volume>
         <issue>1</issue>
         <firstPage>25</firstPage>
         <lastPage>29</lastPage>
         <publisher>Academy of Science of the Royal Society of Canada c/o Carleton University, School of Mathematics and Statistics, Ottawa, ON</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:11355</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>30</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0743.30028</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:11355</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/11355</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Yang, Chung-Chun</creatorName>
         <givenName>Yang</givenName>
         <familyName>Chung-Chun</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">yang.chung-chun</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Song, Guodong</creatorName>
         <givenName>Song</givenName>
         <familyName>Guodong</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">song.guodong</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">He, Yuzan</creatorName>
         <givenName>He</givenName>
         <familyName>Yuzan</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">he.yuzan</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: The paper presents a survey of the latest development of factorization theory of meromorphic functions. The authors introduce the fundamental problems of factorization theory such as the classes of prime or pseudo- prime functions, the primality criterion of meromorhic functions, the unique factorizability, etc. and pose several interesting research questions.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Factorization theory of meromorphic functions and research problems</title>
   </titles>
   <publisher xml:lang="en">Beijing University Press, Beijing</publisher>
   <publicationYear>1991</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="30D05">Functional equations in the complex plane, iteration and composition of analytic functions of one complex variable</subject>
      <subject subjectScheme="msc2020" classificationCode="30D30">Meromorphic functions of one complex variable (general theory)</subject>
      <subject subjectScheme="keyword">factorization theory</subject>
   </subjects>
   <language>Chinese</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">1000-0917</relatedItemIdentifier>
         <titles>
            <title>Advances in Mathematics (Beijing)</title>
         </titles>
         <publicationYear>1991</publicationYear>
         <volume>20</volume>
         <issue>2</issue>
         <firstPage>142</firstPage>
         <lastPage>151</lastPage>
         <publisher>Beijing University Press, Beijing</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:11376</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>47</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0756.47046</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:11376</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/11376</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Zhang, Shisheng</creatorName>
         <givenName>Zhang</givenName>
         <familyName>Shisheng</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">chang.shih-sen</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Chen, Yuping</creatorName>
         <givenName>Chen</givenName>
         <familyName>Yuping</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">chen.yuping</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">The authors study fixed point theorems of Krasnosel'skij type for multivalued operators. The classical invariance condition is replaced by a boundary condition of Leray-Schauder type.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">On a class of fixed point theorems of Krasnosel'skij type</title>
   </titles>
   <publisher xml:lang="en">Academia Sinica, Institute of Mathematics, Beijing; Chinese Mathematical Society, Beijing</publisher>
   <publicationYear>1991</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="47H10">Fixed-point theorems</subject>
      <subject subjectScheme="keyword">fixed point theorems of Krasnosel'skij type for multivalued operators</subject>
      <subject subjectScheme="keyword">boundary condition of Leray-Schauder type</subject>
   </subjects>
   <language>Chinese</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0583-1431</relatedItemIdentifier>
         <titles>
            <title>Acta Mathematica Sinica</title>
         </titles>
         <publicationYear>1991</publicationYear>
         <volume>34</volume>
         <issue>1</issue>
         <firstPage>33</firstPage>
         <lastPage>39</lastPage>
         <publisher>Academia Sinica, Institute of Mathematics, Beijing; Chinese Mathematical Society, Beijing</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:11397</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>93</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0744.93079</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:11397</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/11397</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Liao, Xiaoxin</creatorName>
         <givenName>Liao</givenName>
         <familyName>Xiaoxin</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">liao.xiao-xin</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">This paper considers the general Lur'e control system: (1) \({dx\over dt}- Ax+bf(\sigma),\quad \sigma=\sum^ n_{i=1} c_ ix_ i\), where \(x=(x_ 1,\dots,x_ n)\in\mathbb{R}^ n\), \(A\) is a real \(n\times n\) matrix with \(\text{Re }\lambda(A)\leq 0\), \(b\), \(c\in\mathbb{R}^ n\) and \(f\in F=\{f\in C(-\infty,+\infty)\mid f(0)=0\), \(\forall\sigma\neq 0\), \(\sigma f(\sigma)&gt;0\}\). A zero-solution is said to be absolutely stable with respect to the core \(k=\{x\mid\sigma=0\}\), if \(\forall f\in F\), \(\forall\varepsilon&gt;0\), \(\exists\delta(\varepsilon)&gt;0\) such that when \(\| x_ 0\|&lt;\delta(\varepsilon)\), the solution of (1) \(x(\cdot)=x(\cdot,t_ 0,x_ 0)\) satisfies \(\forall t\geq t_ 0\), \(|\sigma(t)|&lt;\varepsilon\) and \(\forall x_ 0\in\mathbb{R}^ n\), \(\lim_{t\to+\infty}\sigma(t)=0\). Via this concept the author gives some necessary and sufficient conditions for the absolute stability of a zero- solution of (1). Comparing these new criteria with known methods and results, the author concludes that his criteria can include many known results as special cases and, in particular, improve the famous \(S\)- method. In the last part, the author cites some examples for showing the advantage of his method.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">New criterion for absolute stability of general Lur'e control systems</title>
   </titles>
   <publisher xml:lang="en">Academia Sinica, Institute of Mathematics, Beijing; Chinese Mathematical Society, Beijing</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="93D10">Popov-type stability of feedback systems</subject>
      <subject subjectScheme="keyword">general Lur'e control system</subject>
      <subject subjectScheme="keyword">absolute stability</subject>
   </subjects>
   <language>Chinese</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0583-1431</relatedItemIdentifier>
         <titles>
            <title>Acta Mathematica Sinica</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>33</volume>
         <issue>6</issue>
         <firstPage>841</firstPage>
         <lastPage>852</lastPage>
         <publisher>Academia Sinica, Institute of Mathematics, Beijing; Chinese Mathematical Society, Beijing</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:11458</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>26</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0757.26011</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:11458</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/11458</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Lu, Shi-Pan</creatorName>
         <givenName>Lu</givenName>
         <familyName>Shi-Pan</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">lu.shipan</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Lee, Peng-Yee</creatorName>
         <givenName>Lee</givenName>
         <familyName>Peng-Yee</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">lee.peng-yee</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">The main purpose of the authors is to prove that the following statements are equivalent: (a) \(f\) is Kurzweil-Henstock integrable on \([a,b]\); (b) for every \(\varepsilon&gt;0\) there exist a \(g\geq 0\), Lebesgue integrable on \([a,b]\), and \(\delta(\xi)&gt;0\) such that \(|\sum_{| f(\xi)|&gt;g(\xi)}f(\xi)(v-u)|&lt;\varepsilon\) for every \(\delta\)-fine division \(D=\{[u,v],\xi\}\) of \([a,b]\); (c) there is a number \(A\) such that for every \(\varepsilon&gt;0\) and \(\eta&gt;0\) there are a constant \(\delta_ 0&gt;0\) and an open set \(G\) with \(| G|&lt;\eta\) such that \(|\sum f(\xi)(v-u)-A|&lt;\varepsilon\) for any division \(D=\{[u,v],\xi\}\) of \([a,b]\) such that \(v-u&lt;\delta_ 0\) and \(\xi\notin G\) and there exists \(\delta(\xi)&gt;0\) satisfying \((\xi-\delta(\xi),\;\xi+\delta(\xi))\subset G\) when \(\xi\in G\) such that for any \(\delta\)- fine division \(|\sum_{\xi\in G}f(\xi)(v-u)|&lt;\varepsilon\). Some theorems on integration of sequences are proved as applications.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Globally small Riemann sums and the Henstock integral</title>
   </titles>
   <publisher xml:lang="en">Michigan State University Press, East Lansing, MI</publisher>
   <publicationYear>1991</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="26A39">Denjoy and Perron integrals, other special integrals</subject>
      <subject subjectScheme="keyword">Kurzweil-Henstock integrable functions</subject>
      <subject subjectScheme="keyword">Riemann sums</subject>
      <subject subjectScheme="keyword">Henstock integral</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0147-1937</relatedItemIdentifier>
         <titles>
            <title>Real Analysis Exchange</title>
         </titles>
         <publicationYear>1991</publicationYear>
         <volume>16</volume>
         <issue>2</issue>
         <firstPage>537</firstPage>
         <lastPage>545</lastPage>
         <publisher>Michigan State University Press, East Lansing, MI</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:11950</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>20</setSpec><setSpec>22</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0735.22003</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:11950</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/11950</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Shum, K. P.</creatorName>
         <givenName>Shum</givenName>
         <familyName>K. P.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">shum.kar-ping</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Improving a result of \textit{K. Numakura} [Duke Math. J. 24, 671-680 (1957; Zbl 0218.22004)] the author shows that if \(P\) is a prime open ideal of a compact semigroup \(S\), then there exists a group element \(g\in S\) such that \(P\) coincides with the largest ideal contained in \(S\backslash g\).</description>
   </descriptions>
   <titles>
      <title xml:lang="en">A characterization for prime ideals in compact semigroups</title>
   </titles>
   <publisher xml:lang="en">Edited by South China Normal University, Guangzhou; South East Asian Mathmatical Society, Hong Kong</publisher>
   <publicationYear>1991</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="22A15">Structure of topological semigroups</subject>
      <subject subjectScheme="msc2020" classificationCode="20M12">Ideal theory for semigroups</subject>
      <subject subjectScheme="keyword">prime open ideal</subject>
      <subject subjectScheme="keyword">compact semigroup</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0129-2021</relatedItemIdentifier>
         <titles>
            <title>Southeast Asian Bulletin of Mathematics</title>
         </titles>
         <publicationYear>1991</publicationYear>
         <volume>15</volume>
         <issue>1</issue>
         <firstPage>61</firstPage>
         <lastPage>64</lastPage>
         <publisher>Edited by South China Normal University, Guangzhou; South East Asian Mathmatical Society, Hong Kong</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:12171</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>43</setSpec><setSpec>28</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0773.28010</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:12171</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/12171</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Kosyak, A. V.</creatorName>
         <givenName>Kosyak</givenName>
         <familyName>A. V.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">kosyak.alexandre-v</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Samojlenko, Yu. S.</creatorName>
         <givenName>Samojlenko</givenName>
         <familyName>Yu. S.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">samoilenko.yurii-s</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">For the pair \(G\subset\widetilde G\) that consists of the group of its subgroup the measure \(\mu\) on \(\widetilde G\) is called \(G\)-quasi- invariant if shift transformations on elements \(g\in G\) transform this measure to the equivalent one. Suppose \(B_ 0(\mathbb{N},\mathbb{R})=\lim B(n,\mathbb{R})\) is a group of all finite upper-triangular infinite order matrices with identities on the main diagonal, \(B_ 2(a)\) is a Hilbert completion of \(B_ 0(\mathbb{N},\mathbb{R})\) defined by the system \(a=(a_{kn})\) of weight coefficients. An example of \(B_ 0(\mathbb{N},\mathbb{R})\)-quasi- invariant Gaussian measure in \(B_ 2(a)\) is constructed. The authors show that the result is not generalized if we dispense triangularity: there is no nondegenerate Gaussian measure in the Hilbert algebra \(gl_ 2(a)\) possessing a \(GL_ 0(\mathbb{N},\mathbb{R})\)-quasi-invariant property. Here \(GL_ 0(\mathbb{N},\mathbb{R})=\lim GL(n,\mathbb{R})\) is an inductive limit of general linear groups.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Quasi-invariant measures on ``large'' groups</title>
   </titles>
   <publisher xml:lang="en">Birkhäuser Verlag, Basel</publisher>
   <publicationYear>1986</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="28C10">Set functions and measures on topological groups or semigroups, Haar measures, invariant measures</subject>
      <subject subjectScheme="msc2020" classificationCode="43A05">Measures on groups and semigroups, etc.</subject>
      <subject subjectScheme="msc2020" classificationCode="28C20">Set functions and measures and integrals in infinite-dimensional spaces (Wiener measure, Gaussian measure, etc.)</subject>
      <subject subjectScheme="keyword">quasi-invariant Gaussian measure</subject>
      <subject subjectScheme="keyword">shift transformations</subject>
      <subject subjectScheme="keyword">Hilbert completion</subject>
      <subject subjectScheme="keyword">nondegenerate Gaussian measure</subject>
      <subject subjectScheme="keyword">Hilbert algebra</subject>
      <subject subjectScheme="keyword">linear groups</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0272-9903</relatedItemIdentifier>
         <titles>
            <title>Selecta Mathematica Sovietica</title>
         </titles>
         <publicationYear>1991</publicationYear>
         <volume>10</volume>
         <issue>1</issue>
         <firstPage>1</firstPage>
         <lastPage>6</lastPage>
         <publisher>Birkhäuser Verlag, Basel</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:13164</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>41</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0736.41011</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:13164</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/13164</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Jia, Rongqing</creatorName>
         <givenName>Jia</givenName>
         <familyName>Rongqing</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">jia.rong-qing</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Let \(R^ s\) be \(s\)-dimensional Euclidean space and \(Z^ s\) be the set of integral points of \(R^ s\). The author constructs dual bases of box spline sequences by Fourier analysis methods. He mainly proves the following result. Let \(X\) be a class of non-zero elements in \(R^ s\) and card \(X=n+s\). If minimal linear subspace containing \(X\) is \(R^ s\), \(X\subset Z^ s\) and \(X\) is of unit modulus, then exists a polynomial sequence \((p_ \beta)_{|\beta|\leq n}\subset G_ s(X)\), such that for every \(\tau\in\hbox{Int}(\hbox{supp}(B(\cdot\mid X)))\) the following linear functional \(\lambda_ \alpha f=[\alpha+\tau]\left(\sum_{|\beta|\leq n}p_ \beta(D)\tau^ \beta/\beta!\right)f\) \((\alpha\in Z^ s)\) satisfies \(\lambda_ \alpha(B(\cdot-\beta\mid X))=\delta_{\alpha\beta}\) for every \(\alpha,\beta\in Z^ s\), furthermore, the polynomial sequence \((p_ \beta)_{|\beta|\leq n}\) satisfying above conditions is unique, where \(B(\cdot\mid X)\) is the box spline, \(G_ s(X)=\{q\in\pi: q(D)B(\cdot\mid X)\in L^ \infty\}\), \(\pi\) stands for the linear space of all polynomials on \(Rs\), \(q(D)=\sum_ \alpha a_ \alpha D^ \alpha\) when \(q(x)=\sum_ \alpha a_ \alpha x^ \alpha\), where \(D\) denote the differential operator, and \([\tau]\) denote the functional calculating value at point \(\tau\), i.e. \([\tau]f=f(\tau)\).</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Subspaces invariant under translations and dual bases for box splines</title>
   </titles>
   <publisher xml:lang="en">Fudan University, Shanghai</publisher>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="41A15">Spline approximation</subject>
      <subject subjectScheme="keyword">dual bases of box spline sequences</subject>
   </subjects>
   <language>Chinese</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">1000-8314</relatedItemIdentifier>
         <titles>
            <title>Chinese Annals of Mathematics. Series A</title>
         </titles>
         <publicationYear>1990</publicationYear>
         <volume>11</volume>
         <issue>6</issue>
         <firstPage>733</firstPage>
         <lastPage>743</lastPage>
         <publisher>Fudan University, Shanghai</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:13183</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>34</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0743.34083</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:13183</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/13183</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Liao, Xiaoxin</creatorName>
         <givenName>Liao</givenName>
         <familyName>Xiaoxin</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">liao.xiao-xin</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">The author gives some sufficient conditions for the trivial solution of a system of difference-differential equations to be asymptotically stable. The approach is to use a certain linear Lyapunov function and a certain Gauss-Seidel iteration for system of nonhomogeneous linear equations.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Stability in linear equations of retarded type</title>
   </titles>
   <publisher xml:lang="en">Fudan University, Shanghai</publisher>
   <publicationYear>1991</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="34K20">Stability theory of functional-differential equations</subject>
      <subject subjectScheme="keyword">asymptotic stability</subject>
      <subject subjectScheme="keyword">difference-differential equations</subject>
      <subject subjectScheme="keyword">Lyapunov function</subject>
      <subject subjectScheme="keyword">Gauss-Seidel iteration</subject>
   </subjects>
   <language>Chinese</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">1000-8314</relatedItemIdentifier>
         <titles>
            <title>Chinese Annals of Mathematics. Series A</title>
         </titles>
         <publicationYear>1991</publicationYear>
         <volume>12</volume>
         <issue>2</issue>
         <firstPage>171</firstPage>
         <lastPage>177</lastPage>
         <publisher>Fudan University, Shanghai</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:14895</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>46</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0738.46007</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:14895</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/14895</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Lin, Peikee</creatorName>
         <givenName>Lin</givenName>
         <familyName>Peikee</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">lin.pei-kee</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">Summary: Let \(1\leq p&lt;\infty\), \(p\neq 2\) and let \(K\) be any complex Hilbert space. We prove that every isometry \(T\) of \(H^ p(K)\) onto itself is of the form \[ (T F)(z)=U(F\circ \phi(z))\cdot(d\phi/dz)^{1/p} \qquad (F\in H^ p(K), | z| &lt;1), \] where \(U\) is a unitary operator on \(K\) and \(\phi\) is a conformal map of the unit disc onto itself.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">The isometries of \(H^ p(K)\)</title>
   </titles>
   <publisher xml:lang="en">Australian Mathematical Society c/o Australian National University, Mathematics Department, Canberra</publisher>
   <publicationYear>1991</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="46E15">Banach spaces of continuous, differentiable or analytic functions</subject>
      <subject subjectScheme="msc2020" classificationCode="46E30">Spaces of measurable functions (\(L^p\)-spaces, Orlicz spaces, Köthe function spaces, Lorentz spaces, rearrangement invariant spaces, ideal spaces, etc.)</subject>
      <subject subjectScheme="msc2020" classificationCode="46J15">Banach algebras of differentiable or analytic functions, \(H^p\)-spaces</subject>
      <subject subjectScheme="keyword">Hardy space</subject>
      <subject subjectScheme="keyword">isometry</subject>
      <subject subjectScheme="keyword">Hilbert space</subject>
      <subject subjectScheme="keyword">conformal map</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">journal article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <relatedItemIdentifier relatedItemIdentifierType="ISSN">0263-6115</relatedItemIdentifier>
         <titles>
            <title>Journal of the Australian Mathematical Society. Series A</title>
         </titles>
         <publicationYear>1991</publicationYear>
         <volume>50</volume>
         <issue>1</issue>
         <firstPage>23</firstPage>
         <lastPage>33</lastPage>
         <publisher>Australian Mathematical Society c/o Australian National University, Mathematics Department, Canberra</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:14981</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>93</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0850.93412</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:14981</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/14981</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Morse, A. S.</creatorName>
         <givenName>Morse</givenName>
         <familyName>A. S.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">morse.a-stephen</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">Simple algorithms for adaptive stabilization</title>
   </titles>
   <publicationYear>1988</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="93C40">Adaptive control/observation systems</subject>
      <subject subjectScheme="msc2020" classificationCode="93D15">Stabilization of systems by feedback</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">serial article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <firstPage>254</firstPage>
         <lastPage>264</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:15029</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>05</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0800.05005</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:15029</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/15029</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Lee, Sin-Min</creatorName>
         <givenName>Lee</givenName>
         <familyName>Sin-Min</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">lee.sinmin</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">Graph algebras which admit only discrete topologies</title>
   </titles>
   <publicationYear>1988</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="05C10">Planar graphs; geometric and topological aspects of graph theory</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">serial article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <firstPage>147</firstPage>
         <lastPage>156</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:15036</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>05</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0800.05011</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:15036</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/15036</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Lee, Sin-Min</creatorName>
         <givenName>Lee</givenName>
         <familyName>Sin-Min</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">lee.sinmin</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">Design of diameter \(e\)-invariant networks</title>
   </titles>
   <publicationYear>1988</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="05C99">Graph theory</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">serial article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <firstPage>89</firstPage>
         <lastPage>102</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:15462</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>05</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0758.05093</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:15462</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/15462</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Sabidussi, G.</creatorName>
         <givenName>Sabidussi</givenName>
         <familyName>G.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">sabidussi.gert</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">[For the entire collection see Zbl 0699.00016.] In an infinite graph \(G\) a ray is a one-way infinite path. Two rays are equivalent if there is a ray that contains infinitely many vertices of each of them, and the equivalence classes of rays are called ends. A dendroid of \(G\) is a minimal edge set containing at least one edge of every (finite or infinite) circuit in \(G\); an end-separator is an edge set whose edge-complement has no component containing two rays from different ends of \(G\). Results include the facts that every minimal end- separator is contained in a dendroid, and every dendroid contains at most one minimal end-separator. Also characterizations of almost circuit- connected trees are given.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Dendroids, end-separators, and almost circuit-connected trees</title>
   </titles>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="05C99">Graph theory</subject>
      <subject subjectScheme="msc2020" classificationCode="05C05">Trees</subject>
      <subject subjectScheme="keyword">almost circuit-connected trees</subject>
      <subject subjectScheme="keyword">ray</subject>
      <subject subjectScheme="keyword">ends</subject>
      <subject subjectScheme="keyword">dendroid</subject>
      <subject subjectScheme="keyword">circuit</subject>
      <subject subjectScheme="keyword">end- separator</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">serial article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <firstPage>221</firstPage>
         <lastPage>236</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:15510</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>70</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0850.70224</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:15510</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/15510</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Sumbatov, A. S.</creatorName>
         <givenName>Sumbatov</givenName>
         <familyName>A. S.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">sumbatov.aleksandr-sumbatovich</nameIdentifier>
      </creator>
   </creators>
   <titles>
      <title xml:lang="en">On linear integrals of non-conservative mechanical systems with two degrees of freedom</title>
   </titles>
   <publicationYear>1987</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="70J99">Linear vibration theory</subject>
   </subjects>
   <language>Russian</language>
   <resourceType resourceTypeGeneral="JournalArticle">serial article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <firstPage>67</firstPage>
         <lastPage>72</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
<record><header><identifier>oai:zbmath.org:15574</identifier><datestamp>2025-03-21T20:07:09Z</datestamp><setSpec>46</setSpec></header><metadata><resource xmlns="http://datacite.org/schema/kernel-4"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-4 http://schema.datacite.org/meta/kernel-4/metadata.xsd">
   <alternateIdentifiers>
      <alternateIdentifier alternateIdentifierType="zbMATH Identifier">0747.46020</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="zbMATH Document ID">oai:zbmath.org:15574</alternateIdentifier>
      <alternateIdentifier alternateIdentifierType="URL">https://zbmath.org/15574</alternateIdentifier>
   </alternateIdentifiers>
   <creators>
      <creator>
         <creatorName nameType="Personal">Lindsay, J. M.</creatorName>
         <givenName>Lindsay</givenName>
         <familyName>J. M.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">lindsay.j-martin</nameIdentifier>
      </creator>
      <creator>
         <creatorName nameType="Personal">Maassen, H.</creatorName>
         <givenName>Maassen</givenName>
         <familyName>H.</familyName>
         <nameIdentifier schemeURI="https://zbmath.org/"
                         nameIdentifierScheme="zbMATH Author Code">maassen.hans</nameIdentifier>
      </creator>
   </creators>
   <descriptions>
      <description xml:lang="en" descriptionType="Abstract">[For the entire collection see Zbl 0702.00025.] From the author's introduction: ``It is well known that the symmetric Fock space over a real Hilbert space \(h\) and \(L^ 2\) of the Gaussian space over \(h\) are naturally isomorphic (Wiener-Segal-Ito-\dots). The purpose of this note is to demonstrate the algebraic character of this isomorphism in the case where \(h\) is \(L^ 2\) of a non-atomic measure space.''.</description>
   </descriptions>
   <titles>
      <title xml:lang="en">Duality transform as \(^*\)-algebraic isomorphism</title>
   </titles>
   <publicationYear>1990</publicationYear>
   <subjects>
      <subject subjectScheme="msc2020" classificationCode="46E20">Hilbert spaces of continuous, differentiable or analytic functions</subject>
      <subject subjectScheme="keyword">symmetric Fock space over a real Hilbert space</subject>
      <subject subjectScheme="keyword">Gaussian space</subject>
      <subject subjectScheme="keyword">non- atomic measure space</subject>
   </subjects>
   <language>English</language>
   <resourceType resourceTypeGeneral="JournalArticle">serial article</resourceType>
   <rightsList>
      <rights xml:lang="en"
              schemeURI="https://api.zbmath.org/v1/"
              rightsIdentifierScheme="zbMATH"
              rightsIdentifier="CC-BY-SA 4.0"
              rightsURI="https://creativecommons.org/licenses/by-sa/4.0/">
                    The zbMATH Open OAI-PMH API is subject to the Terms and Conditions for the zbMATH Open API Service of FIZ Karlsruhe – Leibniz-Institut für Informationsinfrastruktur GmbH.
Content generated by zbMATH Open, such as reviews, classifications, software, or author disambiguation data, are distributed under CC-BY-SA 4.0. This defines the license for the whole dataset, which also contains non-copyrighted bibliographic metadata and reference data derived from I4OC (CC0). Note that the API only provides a subset of the data in the zbMATH Open Web interface. In several cases, third-party information, such as abstracts, cannot be made available under a suitable license through the API. In those cases, we replaced the data with the string
"zbMATH Open Web Interface contents unavailable due to conflicting licenses."</rights>
   </rightsList>
   <relatedItems>
      <relatedItem relationType="IsPublishedIn" relatedItemType="Book">
         <titles>
            <title>:unav</title>
         </titles>
         <publicationYear>:unav</publicationYear>
         <firstPage>247</firstPage>
         <lastPage>250</lastPage>
         <publisher>:unav</publisher>
      </relatedItem>
   </relatedItems>
</resource></metadata></record>
</ListRecords></OAI-PMH>
  recorded_at: Mon, 24 Mar 2025 16:10:45 GMT
recorded_with: VCR 6.3.1
